---
title: "Ordinal scales"
editor_options: 
  chunk_output_type: inline
---

::: {.callout-note appearance="simple"}
This is a work in progress that is currently undergoing heavy technical editing and copy-editing
:::

## Ordinal scales

The ordinal scales are structured as rank-ordered numeric classes in a finite number of classes. The reasons for using ordinal scales include convenience and speed of rating [@madden2017]. There are two common types of ordinal scales in plant pathological research: quantitative and qualitative [@Chiang2022].

### Quantitative ordinal

In the quantitative ordinal scale, each score represents a defined interval of the percentage scale. The most well-known quantitative ordinal scale is the Horsfall-Barratt (HB) scale, developed in the early 1940s when the science of plant pathology was in need of more quantitative approaches [@hebert1982]. The HB scale splits the percent scale into twelve consecutive logarithmic-based intervals of severity from 0 to 100%. The intervals increase in size from 0 to 50% and decline from 50 to 100%.

::: callout-warning
## Controversy of the H-B scale

The divisions of the H-B scale were based on two assumptions. First, on the logarithmic relationship between the intensity of a stimulus and sensation. Second, that the rater tends to focus on objects that are of smaller size when observing objects of two colors [@madden2017]. The basis is the so-called Weber-Fechner law. There is little experimental evidence of the assumptions. To date, evidence shows a linear relationship, not a logarithmic, between visually estimated and actual severity [@nutter2006a]. Also, those authors showed that raters more accurately discriminated disease severity between 25% and 50% compared to what the H-B scale allowed. New scale structure have been proposed to overcome the issues associated with the H-B scale [@liu2019; @chiang2014]. The Chiang scale follows a linear relationship with percentage area diseased at severities \>10% (class 6 on the scale)
:::

Let's input the HB scale data and store as a data frame in R so we can prepare a table and a plot.

```{r}
#| label: tbl-HB
#| tbl-cap: "The Horsfal-Barrat quantitative ordinal scale used as a tool for assessing plant disease severity "
HB <- tibble::tribble(
  ~ordinal, ~'range', ~midpoint,
  0,          '0',    0,   
  1,    '0+ to 3',  1.5,   
  2,    '3+ to 6',  4.5,   
  3,   '6+ to 12',  9.0,  
  4,  '12+ to 25', 18.5, 
  5,  '25+ to 50', 37.5, 
  6,  '50+ to 75', 62.5, 
  7,  '75+ to 88', 81.5, 
  8,  '88+ to 94', 91.0, 
  9,  '94+ to 97', 95.5, 
  10,'97+ to 100', 98.5,  
  11,      '100',   100 
  )
knitr::kable(HB, align = "c")
```

Let's visualize the different sizes of the percent interval encompassing each score.

```{r}
#| warning: false
#| message: false
#| label: fig-hb
#| fig-cap: "Ordinal scores of the Horsfal-Barrat scale"
#| code-fold: true
library(tidyverse)
theme_set(theme_bw())
HB |> 
  ggplot(aes(midpoint, ordinal))+
  geom_point(size =2)+
  geom_line()+
  scale_x_continuous(breaks = c(0, 3, 6, 12, 25, 50, 75, 88, 94, 97))+
  scale_y_continuous(breaks = c(1:12))+
  geom_vline(aes(xintercept = 3), linetype = 2)+
  geom_vline(aes(xintercept = 6), linetype = 2)+
  geom_vline(aes(xintercept = 12), linetype = 2)+
  geom_vline(aes(xintercept = 25), linetype = 2)+
  geom_vline(aes(xintercept = 50), linetype = 2)+
  geom_vline(aes(xintercept = 75), linetype = 2)+
  geom_vline(aes(xintercept = 88), linetype = 2)+
  geom_vline(aes(xintercept = 94), linetype = 2)+
  geom_vline(aes(xintercept = 97), linetype = 2)+
  labs(x = "Percent severity", y = "HB score")
```

We can repeat those procedures to visualize the Chiang scale.

```{r}
#| label: tbl-chiang
#| tbl-cap: "The Chiang quantitative ordinal scale used as a tool for assessing plant disease severity "
chiang <- tibble::tribble(
  ~ordinal, ~'range', ~midpoint,
  0,          '0',     0,   
  1,  '0+ to 0.1',  0.05,   
  2,'0.1+ to 0.5',   0.3,   
  3,  '0.5+ to 1',  0.75,  
  4,    '1+ to 2',   1.5, 
  5,    '2+ to 5',     3, 
  6,   '5+ to 10',   7.5, 
  7,  '10+ to 20',    15, 
  8,  '20+ to 30',    25, 
  9,  '30+ to 40',    35, 
  10, '40+ to 50',    45,  
  11, '50+ to 60',    55,
  12, '60+ to 70',    65,
  13, '70+ to 80',    75,
  14, '80+ to 90',    85,
  15,'90+ to 100',   95
  )
knitr::kable(chiang, align = "c")
```

```{r}
#| warning: false
#| message: false
#| label: fig-chiagn
#| fig-cap: "Ordinal scores of the Chiang scale"
#| code-fold: true
library(tidyverse)
theme_set(theme_bw())
chiang |> 
  ggplot(aes(midpoint, ordinal))+
  geom_point(size =2)+
  geom_line()+
  scale_y_continuous(breaks = c(0:15))+
  scale_x_continuous(breaks = c(0, 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100))+
  geom_vline(aes(xintercept = 0), linetype = 2)+
  geom_vline(aes(xintercept = 0.1), linetype = 2)+
  geom_vline(aes(xintercept = 0.5), linetype = 2)+
  geom_vline(aes(xintercept = 1), linetype = 2)+
  geom_vline(aes(xintercept = 2), linetype = 2)+
  geom_vline(aes(xintercept = 5), linetype = 2)+
  geom_vline(aes(xintercept = 10), linetype = 2)+
  geom_vline(aes(xintercept = 20), linetype = 2)+
  geom_vline(aes(xintercept = 30), linetype = 2)+
   geom_vline(aes(xintercept = 40), linetype = 2)+
   geom_vline(aes(xintercept = 50), linetype = 2)+
   geom_vline(aes(xintercept = 60), linetype = 2)+
   geom_vline(aes(xintercept = 70), linetype = 2)+
   geom_vline(aes(xintercept = 80), linetype = 2)+
   geom_vline(aes(xintercept = 90), linetype = 2)+
   geom_vline(aes(xintercept = 100), linetype = 2)+
  labs(x = "Percent severity", y = "Chiang score")
  
  
```

### Qualitative ordinal

In the qualitative ordinal scale, each class provides a description of the symptoms. An example is the ordinal 0-3 scale for rating eyespot of wheat developed by [@scott1974].

| Class | Description                                                                                                 |
|---------------------|---------------------------------------------------|
| 0     | uninfected                                                                                                  |
| 1     | slight eyespot (or or more small lesion occupying in total less than half of the circumference of the stem) |
| 2     | moderate eyespot (one or more lesions occupying at least half the circumference of the stem)                |
| 3     | severe eyespot (stem completely girdled by lesions; tissue softened so that lodging would really occur)     |

: Ordinal scale for rating eyespot of wheat [@scott1974]

## Disease severity index (DSI)

Usually, when quantitative or qualitative ordinal scales are used, the scores are transformed into an index on a percentage basis, such as the disease severity index (DSI) which are used in data analysis. The DSI is a single number that summarizes a large amount of information on disease severity [@chester1950]. The formula for a DSI (%) can be written as follows:

$DSI = \frac{∑(class \ freq. \ ✕ \ score \  of \ class)} {total \ n \ ✕ \ maximal \ class} ✕ 100$

The `DSI()` is part of the *r4pde* package. It allows to automate the calculation of the disease severity index (DSI) in a series of units (e.g. leaves) that are further classified according to ordinal scores. The function requires three arguments:

-   unit = the vector of the number of each unit

-   class = the vector of the scores for the units

-   max = the maximum value of the scale

Let's use a toy data set composed of 12 units where each received an ordinal score. The vectors were arranged as a data frame named scores.

```{r}
unit <- c(1:12)
class <- c(2,3,1,1,3,4,5,0,2,5,2,1)
ratings <- data.frame(unit, class)
knitr::kable(ratings)

```

The ordinal score used in this example has 6 as the maximum score. The function returns the DSI value.

```{r}
library(r4pde)
DSI(ratings$unit, ratings$class, 6)

```

Let's work now with a situation of multiple plots (5 replicates) where a fixed number of 12 samples were taken and assessed using an ordinal score. Let's input the data using the `tribble()` function. Note that the data is in the wide format.

```{r}
exp <- tibble::tribble(
  ~rep, ~`1`, ~`2`, ~`3`, ~`4`, ~`5`, ~`6`, ~`7`, ~`8`, ~`9`, ~`10`, ~`11`,~`12`,
  1, 2, 3, 1, 1, 3, 4, 5, 0, 2, 5, 2, 1,
  2, 3, 4, 4, 6, 5, 4, 4, 0, 2, 1, 1, 5,
  3, 5, 6, 6, 5, 4, 2, 0, 0, 0, 0, 2, 0,
  4, 5, 6, 0, 0, 0, 3, 3, 2, 1, 0, 2, 3, 
  5, 0, 0, 0, 0, 2, 3, 2, 5, 6, 2, 1, 0,
)
knitr::kable(exp)

```

After reshaping the data to the long format, we can calculate the DSI for each plot/replicate as follows:

```{r}
res <- exp |> 
  pivot_longer(2:13, names_to = "unit", values_to = "class") |>
  group_by(rep) |> 
  summarise(DSI = DSI(unit, class, 6))
```

And here we have the results of the DSI for each replicate.

```{r}
knitr::kable(res, align = "c")
```
