{
  "articles": [
    {
      "path": "about.html",
      "title": "About this site",
      "description": "Some additional details about the website",
      "author": [],
      "contents": "\n\n\n\n",
      "last_modified": "2020-12-09T23:16:40-03:00"
    },
    {
      "path": "index.html",
      "title": "Modeling Plant Epidemics in R ",
      "description": "Prof. [Emerson Del Ponte](https://emersondelponte.netlify.app/)<br>\nDepartamento de Fitopatologia<br>\nUniversidade Federal de Viçosa<br><br>\n",
      "author": [],
      "contents": "\n\nContents\nAbout\nModules\n\nAbout\nModeling Plant Disease epidemics in R is a tutorial prepared to support several lectures I’ve given as Guest Lecturer for the Plant Disease Epidemiology course offered to students of the Professional Masters in Plant Health in Sustainable Cropping Systems. These materials have been used in my graduate course on Plant Disease Epidemiology FIP 602 offered every year by the Graduate Program in Plant Pathology of the Universidade Federal de Viçosa.\nModules\nThis is a work in progress and new modules will be added when ready. Currently, the following topics have been covered:\nTemporal analysis\nPopulation dynamics models\nFitting models to actual epidemics\n\n",
      "last_modified": "2020-12-09T23:16:41-03:00"
    },
    {
      "path": "temporal-fitting-models.html",
      "title": "Model fitting",
      "description": "Fitting epidemiological models to diseae progress curve data from both non-replicated and designed experiments.",
      "author": [],
      "contents": "\n\nContents\nIntroduction\nNon-replicated\nInitial setup\nEntering data\nVisualize the DPCs\n\n\nFitting: single epidemics\nFitting: multiple epidemics\n\n\nDesigned experiments\nLoading data\nVisualizing the DPCs\nModel fitting\n\n\n\n\nIntroduction\nIn this tutorial you will learn how to fit models to multiple actual disease progress curves (DPCs) data obtained from the literature. I will demonstrate how to fit and select the models using a new R package called epifitter. A few user friendly functions will help us decide which model to choose to obtain the parameters of interest and further compare the epidemics.\nTo illustrate, I will use two datasets available from Chapter 3 from the book, Study of Plant Disease Epidemics, authored by Prof. Madden and collaborators (Madden et al. 2007). In the book, SAS codes are presented to perform a few analysis. We then provide an alternative code for performing similar analysis, although not perfectly reproducing the results from the book.\nNon-replicated\nHere we will compare three DPCs of the incidence of tobacco etch, a virus disease, in peppers. Evaluations of incidence were evaluated at a 7-day interval up to 49 days.The data are available in chapter 4 (page 93). Let’s input the data manually and create a data frame. First column is the assessment time and the other columns correspond to the treatments, called groups in the book, from 1 to 3.\nInitial setup\nLoad essential packages and set parameters recursively.\n\n\n\nEntering data\n\n\npepper <- \n  tibble::tribble(\n   ~t,  ~`1`,  ~`2`,  ~`3`,\n   0,  0.08, 0.001, 0.001,\n   7,  0.13,  0.01, 0.001,\n  14,  0.78,  0.09,  0.01,\n  21,  0.92,  0.25,  0.05,\n  28,  0.99,   0.8,  0.18,\n  35, 0.995,  0.98,  0.34,\n  42, 0.999,  0.99,  0.48,\n  49, 0.999, 0.999,  0.74\n  ) \n\n\n\nVisualize the DPCs\nBefore proceeding with model selection and fitting, let’s visualize the three epidemics. The code below reproduces quite exactly the top plot of Fig. 4.15 (Madden et al. 2007; page 94). The appraisal of the curves might give us a hint on which models are the best candidates.\nBecause the data was entered in the wide format (each DPCs in a different columns) we need to reshape it to the tidyverse-suitable format, which is the long format. The pivot_longer function will do the job of reshaping from wide to long format so we can finally use the ggplot function to produce the plot.\n\n\npepper %>% \n  pivot_longer(2:4, names_to =\"treat\", values_to = \"inc\") %>% \n  ggplot (aes(t, inc, \n              linetype = treat, \n              shape = treat, \n              group = treat))+\n  geom_point(size =2)+\n  geom_line()+\n  annotate(geom = \"text\", x = 15, y = 0.84, label = \"1\")+\n  annotate(geom = \"text\", x = 23, y = 0.6, label = \"2\")+\n  annotate(geom = \"text\", x = 32, y = 0.33, label = \"3\")+\n  labs(y = \"Disease incidence (y)\",\n       x = \"Time (days)\")+\n  theme(legend.position = \"none\")\n\n\n\n\n\nMost of the three curves appear to follow a sigmoid shape with the exception of group 3 that resembles an exponential growth, not reaching the maximum value, and thus suggesting an incomplete epidemic. We can easily discard the monomolecular and exponential models and decided on the other two non-flexible models: logistic or Gompertz. To do that, let’s proceed to model fitting and evaluate the statistics for supporting a final decision. There are two modeling approaches for model fitting in epifitter: the linear or nonlinear parameter-estimation methods.\nFitting: single epidemics\nAmong the several options offered by epifitter we start with the simplest one, which is fit a model to a single epidemics using the linear regression approach. For such, the fit_lin() requires two arguments: time (time) and disease intensity (y) each one as a vector stored or not in a dataframe.\nSince we have three epidemics, fit_lin() will be use three times. The function produces a list object with six elements. Let’s first look at the Stats dataframe of each of the three lists named epi1 to epi3.\n\n\nlibrary(epifitter)\n\nepi1 <- fit_lin(time = pepper$t,  \n  y = pepper$`1` )\nepi1$Stats\n\n\n                CCC r_squared   RSE\nGompertz      0.985     0.970 0.591\nMonomolecular 0.984     0.968 0.543\nLogistic      0.978     0.957 0.824\nExponential   0.784     0.645 0.670\n\n\n\nepi2 <- fit_lin(time = pepper$t,  \n  y = pepper$`2` )\nepi2$Stats\n\n\n                CCC r_squared   RSE\nLogistic      0.996     0.992 0.452\nGompertz      0.971     0.943 0.841\nMonomolecular 0.925     0.860 1.068\nExponential   0.897     0.813 1.202\n\n\n\nepi3 <- fit_lin(time = pepper$t,  \n  y = pepper$`3` )\nepi3$Stats\n\n\n                CCC r_squared   RSE\nLogistic      0.983     0.967 0.605\nGompertz      0.983     0.966 0.226\nExponential   0.964     0.930 0.771\nMonomolecular 0.859     0.753 0.253\n\nThe statistics of the model fit confirms our initial guess that the predictions by the logistic or the Gompertz are closer to the observations than predictions by the other models. There is no much difference between them based on these statistics. However, to pick one of the models, it is important to inspect the curves with the observed and predicted values to check which model is best for all curves.\nFitting: multiple epidemics\nBefore looking at the prediction, let’s use another handy function that allows us to simultaneously fit the models to multiple DPC data. Different from fit_lin(), fit_multi() requires the data to be structured in the long format where there is a column specifying each of the epidemics.\nLet’s then create a new data set called pepper2 using the data transposing functions of the tidyr package.\n\n\npepper2 <- pepper %>% \n  pivot_longer(2:4, names_to =\"treat\", values_to = \"inc\")\n\n\n\nNow we fit the models to all DPCs. Note that the name of the variable indicating the DPC code needs to be informed in strata_cols argument.\n\n\nepi_all <- fit_multi(\n  time_col = \"t\",\n  intensity_col = \"inc\",\n  data = pepper2,\n  strata_cols = \"treat\",\n  nlin = FALSE\n)\n\n\n\nNow let’s select the statistics of model fitting. Again, Epifitter ranks the models based on the CCC (the higher the better) but it is important to check the RSE as well - the lower the better. In fact, the RSE is more important when the goal is prediction.\n\n\nepi_all$Parameters %>% \n  select(treat, model, best_model, RSE, CCC)\n\n\n   treat         model best_model   RSE   CCC\n1      1      Gompertz          1 0.591 0.985\n2      1 Monomolecular          2 0.543 0.984\n3      1      Logistic          3 0.824 0.978\n4      1   Exponential          4 0.671 0.784\n5      2      Logistic          1 0.452 0.996\n6      2      Gompertz          2 0.841 0.971\n7      2 Monomolecular          3 1.068 0.925\n8      2   Exponential          4 1.202 0.897\n9      3      Logistic          1 0.605 0.983\n10     3      Gompertz          2 0.226 0.982\n11     3   Exponential          3 0.771 0.964\n12     3 Monomolecular          4 0.253 0.859\n\nTo be more certain about our decision, let’s advance to the final step which is to produce the plots with the observed and predicted values for each assessment time by calling the Data dataframe of the `epi_all list.\n\n\nepi_all$Data %>%\n filter(model %in% c(\"Gompertz\", \"Logistic\")) %>% \n  ggplot(aes(time, predicted, shape = treat)) +\n  geom_point(aes(time, y)) +\n  geom_line() +\n  facet_wrap(~ model) +\n coord_cartesian(ylim = c(0, 1)) + # set the max to 0.6\n  labs(\n    y = \"Disease incidence\",\n    x = \"Time (days after emergence)\"\n  )\n\n\n\n\nOverall, the logistic model seems a better fit for all the curves. Let’s produce a plot with the prediction error versus time.\n\n\nepi_all$Data %>%\n filter(model %in% c(\"Gompertz\", \"Logistic\")) %>% \n  ggplot(aes(time, predicted -y, shape = treat)) +\n  geom_point() +\n  geom_line() +\n  geom_hline(yintercept = 0, linetype =2)+\n  facet_wrap(~ model) +\n coord_cartesian(ylim = c(-0.4, 0.4)) + # set the max to 0.6\n  labs(\n    y = \"Prediction error\",\n    x = \"Time (days after emergence)\"\n  )\n\n\n\n\nThe plots above confirms the logistic model as good fit overall because the errors for all epidemics combined are more scattered around the non-error line.\n\n\n  epi_all$Parameters %>%\n    filter(model == \"Logistic\") %>%\n    select(treat, y0, y0_ci_lwr, y0_ci_upr, r, r_ci_lwr, r_ci_upr \n)\n\n\n  treat       y0 y0_ci_lwr y0_ci_upr     r r_ci_lwr r_ci_upr\n1     1 0.093504  0.027321   0.27473 0.210    0.166    0.255\n2     2 0.001373  0.000672   0.00280 0.278    0.254    0.303\n3     3 0.000813  0.000313   0.00211 0.175    0.143    0.208\n\nWe can produce a plot for visual inference on the differences in the parameters.\n\n\np1 <- epi_all$Parameters %>%\n  filter(model == \"Logistic\") %>%\n  ggplot(aes(treat, r)) +\n  geom_point(size = 3) +\n  geom_errorbar(aes(ymin = r_ci_lwr, ymax = r_ci_upr),\n    width = 0,\n    size = 1\n  ) +\n  labs(\n    x = \"Time\",\n    y = \"r\"\n  )\n\np2 <- epi_all$Parameters %>%\n  filter(model == \"Logistic\") %>%\n  ggplot(aes(treat, 1 - exp(-y0))) +\n  geom_point(size = 3) +\n  geom_errorbar(aes(ymin = y0_ci_lwr, ymax = y0_ci_upr),\n    width = 0,\n    size = 1\n  ) +\n  labs(\n    x = \"Time\",\n    y = \"y0\"\n  )\n\np1 | p2\n\n\n\n\n\nDesigned experiments\nIn this next exercise, we will work with disease data collected over time in the same plot unit (also called repeated measures) from a designed experiment for evaluating and comparing treatment effects.\nAgain, we will use a dataset of progress curves shown in page 98 of the Study of Plant Disease Epidemics book (Madden et al. 2007). The curves represent the incidence of soybean plants symptomatic for bud blight caused by tobacco streak virus. Four treatments (different planting dates) were evaluated in randomized complete block design with four replicates. There are four assessment in time for each curve. The data was stored as a csv file and will be loaded using read_csv() function and stored as dataframe called budblight.\nLoading data\n\n\nbudblight <- read_csv(\"data/bud-blight-soybean.csv\")\n\n\n\nLet’s have a look at the first six rows of the dataset and check the data type for each column. There is an additional column representing the replicates, called block.\n\n\nhead(budblight)\n\n\n# A tibble: 6 x 4\n  treat  time block     y\n  <chr> <dbl> <dbl> <dbl>\n1 PD1      30     1  0.1 \n2 PD1      30     2  0.3 \n3 PD1      30     3  0.1 \n4 PD1      30     4  0.1 \n5 PD1      40     1  0.3 \n6 PD1      40     2  0.38\n\nVisualizing the DPCs\nLet’s have a look at the curves and produce a combo plot figure similar to Fig. 4.17 of the book, but without the line of the predicted values.\n\n\np3 <- budblight %>%\n  ggplot(aes(\n    time, y,\n    group = block,\n    shape = factor(block)\n  )) +\n  geom_point(size = 1.5) +\n  ylim(0, 0.6) +\n  theme(legend.position = \"none\")+\n  facet_wrap(~treat, ncol =1)+\n  labs(y = \"Disease incidence\",\n       x = \"Time (days after emergence)\")\n\n\n\n\n\np4 <- budblight %>%\n  ggplot(aes(\n    time, log(1 / (1 - y)),\n    group = block,\n    shape = factor(block)\n  )) +\n  geom_point(size = 2) +\n  facet_wrap(~treat, ncol = 1) +\n  theme(legend.position = \"none\")+\n  labs(y = \"Transformed incidence\", x = \"Time (days after emergence)\")\n\np3 | p4\n\n\n\n\nModel fitting\nRemember that the first step in model selection is the visual appraisal of the curve data linearized with the model transformation. In the case the curves represent complete epidemics (close to 100%) appraisal of the absolute rate (difference in y between two times) over time is also helpful.\nFor the treatments above, it looks like the curves are typical of a monocyclic disease (the case of soybean bud blight), for which the monomolecular is usually a good fit, but other models are also possible as well. For this exercise, we will use both the linear and the nonlinear estimation method.\nLinear regression\nFor convenience, we use the fit_multi() to handle multiple epidemics. The function returns a list object where a series of statistics are provided to aid in model selection and parameter estimation. We need to provide the names of columns (arguments): assessment time (time_col), disease incidence (intensity_col), and treatment (strata_cols).\n\n\nlin1 <- fit_multi(\n  time_col = \"time\",\n  intensity_col = \"y\",\n  data = budblight,\n  strata_cols = \"treat\",\n  nlin = FALSE\n)\n\n\n\nLet’s look at how well the four models fitted the data. Epifitter suggests the best fitted model (1 to 4, where 1 is best) for each treatment. Let’s have a look at the statistics of model fitting.\n\n\n  lin1$Parameters %>% \n    select(treat, best_model, model, CCC, RSE)\n\n\n   treat best_model         model   CCC    RSE\n1    PD1          1 Monomolecular 0.935 0.0981\n2    PD1          2      Gompertz 0.904 0.2223\n3    PD1          3      Logistic 0.871 0.4475\n4    PD1          4   Exponential 0.828 0.3612\n5    PD2          1 Monomolecular 0.955 0.0700\n6    PD2          2      Gompertz 0.931 0.1794\n7    PD2          3      Logistic 0.906 0.3877\n8    PD2          4   Exponential 0.880 0.3268\n9    PD3          1 Monomolecular 0.939 0.0683\n10   PD3          2      Gompertz 0.929 0.1716\n11   PD3          3      Logistic 0.909 0.3905\n12   PD3          4   Exponential 0.890 0.3388\n13   PD4          1      Gompertz 0.923 0.1747\n14   PD4          2 Monomolecular 0.895 0.0649\n15   PD4          3      Logistic 0.891 0.5241\n16   PD4          4   Exponential 0.874 0.4977\n\nAnd now we extract values for each parameter estimated from the fit of the monomolecular model.\n\n\n  lin1$Parameters %>%\n  filter(model == \"Monomolecular\") %>%\n  select(treat, y0, r)\n\n\n  treat     y0      r\n1   PD1 -0.573 0.0220\n2   PD2 -0.522 0.0190\n3   PD3 -0.449 0.0159\n4   PD4 -0.362 0.0112\n\n\nNow we visualize the fit of the monomolecular model (using filter function - see below) to the data together with the observed data and then reproduce the right plots in Fig. 4.17 from the book.\n\n\nlin1$Data %>%\n  filter(model == \"Monomolecular\") %>%\n  ggplot(aes(time, predicted)) +\n  geom_point(aes(time, y)) +\n  geom_line(size = 0.5) +\n  facet_wrap(~treat) +\n  coord_cartesian(ylim = c(0, 0.6)) + # set the max to 0.6\n  labs(\n    y = \"Disease incidence\",\n    x = \"Time (days after emergence)\"\n  )\n\n\n\n\nNow we can plot the means and respective 95% confidence interval of the apparent infection rate (\\(r\\)) and initial inoculum (\\(y_0\\)) for visual inference.\n\n\np5 <- lin1$Parameters %>%\n  filter(model == \"Monomolecular\") %>%\n  ggplot(aes(treat, r)) +\n  geom_point(size = 3) +\n  geom_errorbar(aes(ymin = r_ci_lwr, ymax = r_ci_upr),\n    width = 0,\n    size = 1\n  ) +\n  labs(\n    x = \"Time\",\n    y = \"r\"\n  )\n\np6 <- lin1$Parameters %>%\n  filter(model == \"Monomolecular\") %>%\n  ggplot(aes(treat, 1 - exp(-y0))) +\n  geom_point(size = 3) +\n  geom_errorbar(aes(ymin = y0_ci_lwr, ymax = y0_ci_upr),\n    width = 0,\n    size = 1\n  ) +\n  labs(\n    x = \"Time\",\n    y = \"y0\"\n  )\n\np5 | p2\n\n\n\n\nNon-linear regression\nTo estimate the parameters using the non-linear approach, we repeat the same arguments in the fit_multi function, but include an additional argument nlin set to TRUE.\n\n\nnlin1 <- fit_multi(\n  time_col = \"time\",\n  intensity_col = \"y\",\n  data = budblight,\n  strata_cols = \"treat\",\n  nlin = TRUE\n)\n\n\n\nLet’s check statistics of model fit.\n\n\nnlin1$Parameters %>%\n  select(treat, model, CCC, RSE, best_model)\n\n\n   treat         model   CCC    RSE best_model\n1    PD1 Monomolecular 0.938 0.0613          1\n2    PD1      Gompertz 0.917 0.0699          2\n3    PD1      Logistic 0.896 0.0770          3\n4    PD1   Exponential 0.854 0.0880          4\n5    PD2 Monomolecular 0.967 0.0421          1\n6    PD2      Gompertz 0.935 0.0573          2\n7    PD2      Logistic 0.908 0.0666          3\n8    PD2   Exponential 0.870 0.0767          4\n9    PD3 Monomolecular 0.957 0.0427          1\n10   PD3      Gompertz 0.926 0.0544          2\n11   PD3      Logistic 0.900 0.0620          3\n12   PD3   Exponential 0.870 0.0689          4\n13   PD4 Monomolecular 0.918 0.0460          1\n14   PD4      Gompertz 0.909 0.0479          2\n15   PD4      Logistic 0.894 0.0508          3\n16   PD4   Exponential 0.884 0.0527          4\n\nAnd now we obtain the two parameters of interest. Note that the values are not the sames as those estimated using linear regression, but they are similar and highly correlated.\n\n\n  nlin1$Parameters %>%\n    filter(model == \"Monomolecular\") %>%\n    select(treat, y0, r)\n\n\n  treat     y0      r\n1   PD1 -0.707 0.0238\n2   PD2 -0.634 0.0206\n3   PD3 -0.505 0.0167\n4   PD4 -0.350 0.0109\n\n\n\np7 <- nlin1$Parameters %>%\n  filter(model == \"Monomolecular\") %>%\n  ggplot(aes(treat, r)) +\n  geom_point(size = 3) +\n  geom_errorbar(aes(ymin = r_ci_lwr, ymax = r_ci_upr),\n    width = 0,\n    size = 1\n  ) +\n  labs(\n    x = \"Time\",\n    y = \"r\"\n  )\n\np8 <- nlin1$Parameters %>%\n  filter(model == \"Monomolecular\") %>%\n  ggplot(aes(treat, y0)) +\n  geom_point(size = 3) +\n  geom_errorbar(aes(ymin = y0_ci_lwr, ymax = y0_ci_upr),\n    width = 0,\n    size = 1\n  ) +\n  labs(\n    x = \"Time\",\n    y = \"y0\"\n  )\n\np7 | p8\n\n\n\n\n\n\n\n",
      "last_modified": "2020-12-09T23:17:06-03:00"
    },
    {
      "path": "temporal-population-models.html",
      "title": "Population dynamics models",
      "description": "Deterministic models of continuous time that describe epidemic progress at the population level allowing to understand, predict and compare epidemics\n",
      "author": [],
      "contents": "\n\nContents\nIntroduction\nNon-flexible models\nExponential\nMonomolecular\nLogistic\nGompertz\n\n\n\nIntroduction\nThe family of models that describe the growth of epidemics, hence population dynamics model, are known as deterministic models of continuous time Madden, Hughes, and van den Bosch (2017). These models are empirically derived, meaning that they come from their fit to disease progress curve data.\nBy convention, time is represented by \\(t\\) , disease intensity by \\(y\\) and the (absolute) rate of change between two time units is represented by \\(\\frac{dy}{dt}\\) . The latter rate depends on \\(y\\) and the apparent infection rate (sensu Vanderplank), hereafter \\(r\\), which summarizes the effect of host, pathogen and environment on the infection chain.\nIn this tutorial, these models and their formulations are shown using R scripts to simulate the theoretical curves produced by these models. I assume that the reader is capable of opening RStudio software and reproduce the analysis by copying and pasting the codes. Hence, a very basic knowledge o R is required. Note that I use pipes in my programming to express a sequence of multiple operations in a more intuitive way.\nLet’s start loading some essential packages for programming, customizing the outputs and defining a global ggplot theme.\n\n\nlibrary(tidyverse)\nlibrary(ggthemes)\nlibrary(patchwork)\ntheme_set(theme_light())\nknitr::opts_chunk$set(echo=TRUE, warning=FALSE, message=FALSE)\n\n\n\nNon-flexible models\nThese population dynamics models require only two parameters to predict the data to produce the curve, hence they are known as non-flexible, as opposed to the flexible ones for which there are at least one additional parameter. Let’s define values for the two model parameters, which are the apparent infection rate \\(r\\) and \\(y_0\\), as well as parameters for the simulations. Further modifications to these values will be handled directly in the simulation (e.g. doubling infection rate, reducing initial inoculum in half, etc.).\n\n\ny0 <- 0.001 \nr <- 0.06 \ntmax <- 60 # maximum duration t of the epidemics\ndat <- data.frame(t = seq(1:tmax), y = seq(0:1)) # define the axes\n\n\n\nNow we can proceed and learn which non-flexible models are there and for which situation they are more appropriate.\nExponential\nThe differential equation for the exponential model is given by\n\\(\\frac{dy}{dt} = r_E.y\\),\nwhere \\(r_E\\) is the infection rate (subscript E for this model) and \\(y\\) is the disease intensity. Biologically, diseased plants, or \\(y\\), and \\(r_E\\) at each time contribute to disease increase. The value of \\(\\frac{dy}{dt}\\) is minimal when \\(y = 0\\) and increases exponentially with the increase in \\(y\\). Let’s check the behavior of the absolute rate over time.\n\n\np0 <- dat %>%\n  ggplot(aes(t, y)) +\n  stat_function(fun = function(t) y0 * exp(r * t)) +\n  labs(\n    y = \"dy/dt\",\n    x = \"Time\",\n    title = \"Monomolecular model\",\n    subtitle =\"r = 0.06\"\n  )\n\np01 <- dat %>%\n  ggplot(aes(t, y)) +\n  stat_function(fun = function(t) y0 * exp(r*2 * t)) +\n  labs(\n    y = \"dy/dt\",\n    x = \"Time\",\n    title = \"Monomolecular model\",\n    subtitle =\"r = 0.12\"\n  )\np0| p01\n\n\n\n\nThe integral for the exponential model is given by\n\\(y = y_0 e^{r_Et}\\)\nLet’s simulate two curves by varying \\(r\\) while fixing \\(y0\\) and varying the latter while fixing \\(r_E\\). We produce the two plots in ggplot and add the predicted curve using the `stat_function`.\nIn the left plot below, note that the infection rate was doubled (\\(r\\) = 0.12) and in the right plot the rate was doubled for both curves but for one curve the inoculum was increase five times.\n\n\np1 <- dat %>%\n  ggplot(aes(t, y)) +\n  stat_function(fun = function(t) y0 * exp(r * t), linetype = 1) +\n  stat_function(fun = function(t) y0 * exp(r * 2 * t), linetype = 2) +\n  ylim(0, 1) +\n  labs(\n    title = \"Exponential model\",\n    subtitle = \"2 times r (dashed) same y0\",\n    x = \"Time\"\n  )\n\n\n\n\n\np2 <- dat %>%\n  ggplot(aes(t, y)) +\n  stat_function(fun = function(t) y0 * exp(r * 2 * t), linetype = 1) +\n  stat_function(fun = function(t) y0 * 5 * exp(r * 2 * t), linetype = 2) +\n  ylim(0, 1) +\n  labs(title = \"Exponential model\", x = \"Time\",\n       subtitle = \"5 times y0 (dashed) same r\")\n\n\n\nThe two plots are then combined to produce a combo figure using the patchwork R pkg.\n\n\np1 | p2\n\n\n\n\nMonomolecular\nThe differential of the monomolecular model is given by\n\\(\\frac{dy}{dt} = r_M (1-y)\\)\nwhere \\(\\frac{y}{dt}\\) is the absolute rate, \\(r_M\\) is the rate parameter of the monomolecular model and \\((1-y)\\) is the proportion of non-infected (healthy) individuals or host tissue. Note that \\(\\frac{dy}{dt}\\) is maximum when \\(y = 0\\) and decreases when \\(y\\) approaches 1. Its decline is due to decrease in the proportion of individuals or healthy sites with the increase in \\(y\\). Any inoculum capable of infecting the host will more likely land on infected individuals or sites. Here is the curve of the absolute rate for the monomolecular model over time.\n\n\ndat %>%\n  ggplot(aes(t, y)) +\n  stat_function(fun = function(t) y0 * exp(-r * t)) +\n  labs(y = \"dy/dt\", x = \"Time\", title = \"Monomolecular\",\n       subtitle = \"Absolute rate over time for y0 = 0.001 and r = 0.06\")\n\n\n\n\nThe integral of the model usually describes the temporal patterns of the monocyclic epidemics. In those, the inoculum produced during the course of the epidemics do not contribute new infections. Therefore, differentl from the exponential model, disease intensity \\(y\\) does not affect the epidemics and so the absolute rate is proportional to \\((1-y)\\).\nThe integral of the monomolecular model is given by\n\\(\\frac{dy}{dt} = 1 - (1-y)e^{-r_Mt}\\)\nLet’s simulate two monomolecular curves with different rate parameters.\n\n\np3 <- dat %>%\n  ggplot(aes(t, y)) +\n  stat_function(fun = function(t) 1 - ((1 - y0) * exp(-r * t))) +\n  stat_function(fun = function(t) 1 - ((1 - y0) * exp(-(r / 3) * t))) +\n  labs(title = \"Monomolecular model\",\n         subtitle = \"Fixed y0 = 0.001\", x = \"Time\"\n       ) +\n  annotate(geom = \"text\", x = 35, y = 0.77, label = \"r = 0.06\") +\n  annotate(geom = \"text\", x = 50, y = 0.55, label = \"r = 0.02\")\n\np4 <- dat %>%\n  ggplot(aes(t, y)) +\n  stat_function(fun = function(t) 1 - ((1 - y0) * exp(-r / 2 * t))) +\n  stat_function(fun = function(t) 1 - ((1 - (y0 * 100)) * exp(-r / 2 * t))) +\n  labs(title = \"Monomolecular model\", \n       subtitle = \"Fixed r = 0.06\", x = \"Time\") +\n  annotate(geom = \"text\", x = 35, y = 0.77, label = \"y0 = 0.01\") +\n  annotate(geom = \"text\", x = 45, y = 0.65, label = \"y0 = 0.001\")\n\np3 | p4\n\n\n\n\nLogistic\nThe logistic model is a more elaborated version of the two previous models as it incorporates the features of them both. Its differential is given by\n\\(\\frac{dy}{dt} = r_L. y . (1 - y)\\),\nwhere \\(r_L\\) is the infection rate of the logistic model, \\(y\\) is the proportion of diseased individuals or host tissue and \\((1-y)\\) is the proportion of non-affected individuals or host area.\nBiologically, \\(y\\) in its differential equation implies that \\(\\frac{dy}{dt}\\) increases with the increase in \\(y\\) (as in the exponential) because more disease means more inoculum. However, \\((1-y)\\) leads to a decrease in \\(\\frac{dy}{dt}\\) when \\(y\\) approaches the maximum \\(y=1\\), because the proportion of healthy individuals or host area decreases (as in the monomolecular). Therefore, \\(\\frac{dy}{dt}\\) is minimal at the onset of the epidemics, reaches a maximum when \\(y/2\\) and declines until \\(y=1\\).\nThe integral is given by\n\\(y = \\frac{1}{1 + (1-y_0).e^{-r.t}}\\),\nwhere \\(r_L\\) is the apparent infection rate of the logistic model and \\(y0\\) is the disease intensity at \\(t=0\\).\n\n\np5 <- dat %>%\n  ggplot(aes(t, y)) +\n  stat_function(\n    linetype = 2,\n    fun = function(t) 1 / (1 + ((1 - y0) / y0) * exp(-r * 2 * t))\n  ) +\n  stat_function(fun = function(t) 1 / (1 + ((1 - y0) / y0) * exp(-r * 4 * t))) +\n  labs(title = \"Logistic model\", subtitle = \"Fixed y0 = 0.001\", x = \"Time\") +\n  annotate(geom = \"text\", x = 41, y = 0.77, label = \"r = 0.18\") +\n  annotate(geom = \"text\", x = 50, y = 0.10, label = \"r = 0.024\")\n\n\np6 <- dat %>%\n  ggplot(aes(t, y)) +\n  stat_function(\n    linetype = 2,\n    fun = function(t) 1 / (1 + ((1 - (y0 / 10)) / (y0 / 10)) * exp(-r * 3 * t))\n  ) +\n  stat_function(fun = function(t) 1 / (1 + ((1 - y0) / y0) * exp(-r * 3 * t))) +\n  labs(title = \"Logistic model\", subtitle = \"Fixed r = 0.24\", x = \"Time\") +\n  annotate(geom = \"text\", x = 35, y = 0.77, label = \"y0 = 0.001\") +\n  annotate(geom = \"text\", x = 50, y = 0.10, label = \"y0 = 0.0001\")\n\n\np5 | p6\n\n\n\n\nGompertz\nThe Gompertz model is similar to the logistic and provides a very good fit to several polycyclic diseases. The differential equation is given by\n\\(\\frac{dy}{dt} = r_G.[ln(1) - ln(y)]\\)\nDifferently from the logistic, the variable representing the non-infected individuals or host area is \\(-ln(y)\\). The integral equation is given by\n\\(y = e^{(ln(y0)).{e^{-r_G.t)}}}\\),\nwhere \\(r_G\\) is the apparent infection rate for the Gompertz models and \\(y_0\\) is the disease intensity at \\(t = 0\\).\n\n\np7 <- dat %>%\n  ggplot(aes(t, y)) +\n  stat_function(\n    linetype = 2,\n    fun = function(t) exp(log(y0) * exp(-r/2 * t))\n  ) +\n  stat_function(fun = function(t) exp(log(y0) * exp(-r*2 * t))) +\n  labs(title = \"Gompertz model\", subtitle = \"Fixed y0 = 0.001\", x = \"Time\") +\n  annotate(geom = \"text\", x = 41, y = 0.77, label = \"r = 0.12\") +\n  annotate(geom = \"text\", x = 50, y = 0.10, label = \"r = 0.03\")\n\n\np8 <- dat %>%\n  ggplot(aes(t, y)) +\n  stat_function(\n    linetype = 2,\n    fun = function(t) exp(log(y0) * exp(-r*2 * t))\n  ) +\n  stat_function(fun = function(t) exp(log(y0/1000) * exp(-r*2 * t))) +\n  labs(title = \"Gompertz model\", subtitle = \"Fixed r = 0.12\", x = \"Time\") +\n  annotate(geom = \"text\", x = 15, y = 0.77, label = \"y0 = 0.001\") +\n  annotate(geom = \"text\", x = 25, y = 0.10, label = \"y0 = 0.00001\")\n\n\np7 | p8\n\n\n\n\n\n\n\nMadden, Laurence V., Gareth Hughes, and Frank van den Bosch, eds. 2017. “CHAPTER 4: Temporal Analysis i: Quantifying and Comparing Epidemics.” In, 63–116. The American Phytopathological Society. https://doi.org/10.1094/9780890545058.004.\n\n\n\n\n",
      "last_modified": "2020-12-09T23:17:16-03:00"
    },
    {
      "path": "temporal-process-models.html",
      "title": "Simulation",
      "description": "Simulating..",
      "author": [],
      "contents": "\n\nContents\nIntroduction\nHLIR function\nSetting up\nSolving equation\nVisualizing HLIR\n\n\nIntroduction\n\n\nlibrary(tidyverse)\nlibrary(deSolve)\n\n\n\nHLIR function\n\n\nHLIR_fun <- function(t, y, par) {\n  # Variables\n  H <- y[1]\n  L <- y[2]\n  I <- y[3]\n  R <- y[4]\n  beta <- par$beta\n  gama <- par$gama\n  mu <- par$mu\n\n  # Right hand side of the model\n  dH <- -beta * H * I\n  dL <- beta * H * I - gama * L\n  dI <- gama * L - mu * I\n  dR <- mu * I\n  return(list(c(dH, dL, dI, dR)))\n}\n\n\n\nSetting up\n\n\n# Set up parameters\n\nbeta <- 0.002 # Per capita rate of infection of susceptible hosts\ngama <- 1 / 6 #  Rate at which exposed (i.e., latently infected) hosts become infectious\ndelta <- 15 # infectious period\nmu <- 1 / delta\nInitCond <- c(1000, 1, 0, 0)\n\n\n\nSolving equation\n\n\nsteps <- seq(1, 60, by = 1)\nparms <- list(beta = beta, gama = gama, mu = mu)\nHLIR <- ode(InitCond, steps, HLIR_fun, parms)\nepidemics <- data.frame(time = HLIR[, 1], H = HLIR[, 2], L = HLIR[, 3], I = HLIR[, 4], R = HLIR[, 5])\n\n\n\nVisualizing HLIR\n\n\nlibrary(ggthemes)\np1 <- epidemics %>%\n  ggplot() +\n  geom_line(aes(time, H, color = \"H\"), size = 2) +\n  geom_line(aes(time, L, color = \"L\"), size = 2) +\n  geom_line(aes(time, I, color = \"I\"), size = 2) +\n  geom_line(aes(time, R, color = \"R\"), size = 2) +\n  geom_line(aes(time, I+R, color = \"DIS\"), size =2, linetype = 2)+\n  labs(y = \"Population size (count)\", x = \"Time (days)\", color = \"Sites\") +\n  theme_few()\n p1\n\n\n\n\n\n\n\n",
      "last_modified": "2020-12-09T23:17:22-03:00"
    }
  ],
  "collections": []
}
