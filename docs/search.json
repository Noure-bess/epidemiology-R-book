[{"path":"index.html","id":"welcome","chapter":"1 Welcome","heading":"1 Welcome","text":"\nR Plant Disease Epidemiology book project development stage. based teaching notes graduate course, currently FIP 602 - Plant Disease Epidemiology, offered every year students Graduate Program Plant Pathology Universidade Federal de Viçosa.\nbook intended minimum knowledge R programming using RStudio IDE tidyverse ecosystem. make use several general specific R packages conducting common tasks related analysis plant disease epidemiology data.","code":""},{"path":"temporal-analysis.html","id":"temporal-analysis","chapter":"2 Temporal analysis","heading":"2 Temporal analysis","text":"family models describe growth epidemics, hence population dynamics model, known deterministic models continuous time Madden, Hughes, van den Bosch (2017a). models usually fitted disease progress curve data obtain two biologically meaningful parameters.tutorial, models formulations shown using R scripts simulate theoretical curves model. reader capable opening R RStudio software reproduce analysis copying pasting codes. Hence, basic knowledge R required.Note use pipes programming express sequence multiple operations intuitive way.Let’s start loading essential packages programming, customizing outputs defining global ggplot theme.","code":"\nlibrary(tidyverse)\nlibrary(ggthemes)\nlibrary(patchwork)\ntheme_set(theme_light())\nknitr::opts_chunk$set(echo=TRUE, warning=FALSE, message=FALSE)"},{"path":"temporal-analysis.html","id":"non-flexible-models","chapter":"2 Temporal analysis","heading":"2.1 Non-flexible models","text":"population dynamics models require least two parameters, hence known non-flexible, opposed flexible ones least one additional (third) parameter.Following convention proposed (Madden, Hughes, van den Bosch 2017a) book “study plant disease epidemics”:time represented \\(t\\)time represented \\(t\\)disease intensity \\(y\\)disease intensity \\(y\\)rate change \\(y\\) two time units represented \\(\\frac{dy}{dt}\\)rate change \\(y\\) two time units represented \\(\\frac{dy}{dt}\\)Now can proceed learn non-flexible models exist situation appropriate.","code":""},{"path":"temporal-analysis.html","id":"exponential","chapter":"2 Temporal analysis","heading":"2.1.1 Exponential","text":"differential equation exponential model given \\(\\frac{dy}{dt} = r_E.y\\),\\(r_E\\) apparent infection rate (subscript E model) (sensu Vanderplank) \\(y\\) disease intensity. Biologically, formulation suggests diseased plants, \\(y\\), \\(r_E\\) time contribute disease increase. value \\(\\frac{dy}{dt}\\) minimal \\(y = 0\\) increases exponentially increase \\(y\\).integral exponential model given \\(y = y_0 e^{r_Et}\\),\\(y0\\) \\(r\\) obtained via estimation. Let’s simulate two curves varying \\(r\\) fixing \\(y0\\) varying latter fixing \\(r_E\\). produce two plots ggplot add predicted curve using `stat_function`. first, need define values two model parameters. modifications values handled directly simulation (e.g. doubling infection rate, reducing initial inoculum half, etc.).plot , note infection rate one curve doubled (\\(r\\) = 0.12)Now inoculum increased five times using doubled rate.","code":"\ny0 <- 0.001 \nr <- 0.06 \ntmax <- 60 # maximum duration t of the epidemics\ndat <- data.frame(t = seq(1:tmax), y = seq(0:1)) # define the axes\ndat %>%\n  ggplot(aes(t, y)) +\n  stat_function(fun = function(t) y0 * exp(r * t), linetype = 1) +\n  stat_function(fun = function(t) y0 * exp(r * 2 * t), linetype = 2) +\n  ylim(0, 1) +\n  labs(\n    title = \"Exponential model\",\n    subtitle = \"2 times r (dashed) same y0\",\n    x = \"Time\"\n  )\ndat %>%\n  ggplot(aes(t, y)) +\n  stat_function(fun = function(t) y0 * exp(r * 2 * t), linetype = 1) +\n  stat_function(fun = function(t) y0 * 5 * exp(r * 2 * t), linetype = 2) +\n  ylim(0, 1) +\n  labs(title = \"Exponential model\", x = \"Time\",\n       subtitle = \"5 times y0 (dashed) same r\")"},{"path":"temporal-analysis.html","id":"monomolecular","chapter":"2 Temporal analysis","heading":"2.1.2 Monomolecular","text":"differential monomolecular model given \\(\\frac{dy}{dt} = r_M (1-y)\\)now \\(r_M\\) rate parameter monomolecular model \\((1-y)\\) proportion non-infected (healthy) individuals host tissue. Note \\(\\frac{dy}{dt}\\) maximum \\(y = 0\\) decreases \\(y\\) approaches 1. decline due decrease proportion individuals healthy sites increase \\(y\\). inoculum capable infecting host likely land infected individuals sites.integral monomolecular model given \\(\\frac{dy}{dt} = 1 - (1-y)e^{-r_Mt}\\)model commonly describes temporal patterns monocyclic epidemics. , inoculum produced course epidemics contribute new infections. Therefore, different exponential model, disease intensity \\(y\\) affect epidemics absolute rate proportional \\((1-y)\\).Let’s simulate two monomolecular curve different rate parameters one one third .Now inoculum increased 100 times reduced rate.","code":"\ndat %>%\n  ggplot(aes(t, y)) +\n  stat_function(fun = function(t) 1 - ((1 - y0) * exp(-r * t))) +\n  stat_function(fun = function(t) 1 - ((1 - y0) * exp(-(r / 3) * t))) +\n  labs(title = \"Monomolecular model\",\n         subtitle = \"Fixed y0 = 0.001\", x = \"Time\"\n       ) +\n  annotate(geom = \"text\", x = 35, y = 0.77, label = \"r = 0.06\") +\n  annotate(geom = \"text\", x = 50, y = 0.55, label = \"r = 0.02\")\ndat %>%\n  ggplot(aes(t, y)) +\n  stat_function(fun = function(t) 1 - ((1 - y0) * exp(-r / 2 * t))) +\n  stat_function(fun = function(t) 1 - ((1 - (y0 * 100)) * exp(-r / 2 * t))) +\n  labs(title = \"Monomolecular model\", \n       subtitle = \"Fixed r = 0.06\", x = \"Time\") +\n  annotate(geom = \"text\", x = 35, y = 0.77, label = \"y0 = 0.01\") +\n  annotate(geom = \"text\", x = 45, y = 0.65, label = \"y0 = 0.001\")"},{"path":"temporal-analysis.html","id":"logistic","chapter":"2 Temporal analysis","heading":"2.1.3 Logistic","text":"logistic model elaborated version two previous models incorporates features . differential given \\(\\frac{dy}{dt} = r_L. y . (1 - y)\\),\\(r_L\\) infection rate logistic model, \\(y\\) proportion diseased individuals host tissue \\((1-y)\\) proportion non-affected individuals host area.Biologically, \\(y\\) differential equation implies \\(\\frac{dy}{dt}\\) increases increase \\(y\\) (exponential) disease means inoculum. However, \\((1-y)\\) leads decrease \\(\\frac{dy}{dt}\\) \\(y\\) approaches maximum \\(y=1\\), proportion healthy individuals host area decreases (monomolecular). Therefore, \\(\\frac{dy}{dt}\\) minimal onset epidemics, reaches maximum \\(y/2\\) declines \\(y=1\\).integral given \\(y = \\frac{1}{1 + (1-y_0).e^{-r.t}}\\),\\(r_L\\) apparent infection rate logistic model \\(y0\\) disease intensity \\(t=0\\). model provides good fit polycyclic epidemics.Let’s check two curves one infection rate double keeping initial inoculum.Now inoculum reduced 10 times infection rate.","code":"\ndat %>%\n  ggplot(aes(t, y)) +\n  stat_function(\n    linetype = 2,\n    fun = function(t) 1 / (1 + ((1 - y0) / y0) * exp(-r * 2 * t))\n  ) +\n  stat_function(fun = function(t) 1 / (1 + ((1 - y0) / y0) * exp(-r * 4 * t))) +\n  labs(title = \"Logistic model\", subtitle = \"Fixed y0 = 0.001\", x = \"Time\") +\n  annotate(geom = \"text\", x = 41, y = 0.77, label = \"r = 0.18\") +\n  annotate(geom = \"text\", x = 50, y = 0.10, label = \"r = 0.024\")\ndat %>%\n  ggplot(aes(t, y)) +\n  stat_function(\n    linetype = 2,\n    fun = function(t) 1 / (1 + ((1 - (y0 / 10)) / (y0 / 10)) * exp(-r * 3 * t))\n  ) +\n  stat_function(fun = function(t) 1 / (1 + ((1 - y0) / y0) * exp(-r * 3 * t))) +\n  labs(title = \"Logistic model\", subtitle = \"Fixed r = 0.24\", x = \"Time\") +\n  annotate(geom = \"text\", x = 35, y = 0.77, label = \"y0 = 0.001\") +\n  annotate(geom = \"text\", x = 50, y = 0.10, label = \"y0 = 0.0001\")"},{"path":"temporal-analysis.html","id":"gompertz","chapter":"2 Temporal analysis","heading":"2.1.4 Gompertz","text":"Gompertz model similar logistic also provides good fit several polycyclic diseases. differential equation given \\(\\frac{dy}{dt} = r_G.[ln(1) - ln(y)]\\)Differently logistic, variable representing non-infected individuals host area \\(-ln(y)\\). integral equation given \\(y = e^{(ln(y0)).{e^{-r_G.t)}}}\\),\\(r_G\\) apparent infection rate Gompertz models \\(y_0\\) disease intensity \\(t = 0\\).Let’s check curves two rates.inoculum reduced thousand times.","code":"\ndat %>%\n  ggplot(aes(t, y)) +\n  stat_function(\n    linetype = 2,\n    fun = function(t) exp(log(y0) * exp(-r/2 * t))\n  ) +\n  stat_function(fun = function(t) exp(log(y0) * exp(-r*2 * t))) +\n  labs(title = \"Gompertz model\", subtitle = \"Fixed y0 = 0.001\", x = \"Time\") +\n  annotate(geom = \"text\", x = 41, y = 0.77, label = \"r = 0.12\") +\n  annotate(geom = \"text\", x = 50, y = 0.10, label = \"r = 0.03\")\ndat %>%\n  ggplot(aes(t, y)) +\n  stat_function(\n    linetype = 2,\n    fun = function(t) exp(log(y0) * exp(-r*2 * t))\n  ) +\n  stat_function(fun = function(t) exp(log(y0/1000) * exp(-r*2 * t))) +\n  labs(title = \"Gompertz model\", subtitle = \"Fixed r = 0.12\", x = \"Time\") +\n  annotate(geom = \"text\", x = 15, y = 0.77, label = \"y0 = 0.001\") +\n  annotate(geom = \"text\", x = 25, y = 0.10, label = \"y0 = 0.00001\")"},{"path":"temporal-analysis.html","id":"model-fitting","chapter":"2 Temporal analysis","heading":"2.2 Model fitting","text":"tutorial learn fit models multiple actual disease progress curves (DPCs) data obtained literature. demonstrate fit select models using new R package called epifitter. user friendly functions help us decide model choose obtain parameters interest compare epidemics.illustrate, use two datasets available Chapter 3 book, Study Plant Disease Epidemics (Madden, Hughes, van den Bosch 2017a). book, SAS codes presented perform analysis. provide alternative code performing similar analysis, although perfectly reproducing results book.","code":""},{"path":"temporal-analysis.html","id":"non-replicated","chapter":"2 Temporal analysis","heading":"2.2.1 Non-replicated","text":"compare three DPCs incidence tobacco etch, virus disease, peppers. Evaluations incidence evaluated 7-day interval 49 days.data available chapter 4 (page 93). Let’s input data manually create data frame. First column assessment time columns correspond treatments, called groups book, 1 3.","code":""},{"path":"temporal-analysis.html","id":"initial-setup","chapter":"2 Temporal analysis","heading":"2.2.1.1 Initial setup","text":"Load essential packages set parameters recursively.","code":"\nlibrary(tidyverse)\nlibrary(knitr)\nlibrary(patchwork)\nlibrary(ggthemes)\ntheme_set(theme_few())\nknitr::opts_chunk$set(echo=TRUE, warning=FALSE, message=FALSE)\noptions(digits = 3)"},{"path":"temporal-analysis.html","id":"entering-data","chapter":"2 Temporal analysis","heading":"2.2.1.2 Entering data","text":"","code":"\npepper <- \n  tibble::tribble(\n   ~t,  ~`1`,  ~`2`,  ~`3`,\n   0,  0.08, 0.001, 0.001,\n   7,  0.13,  0.01, 0.001,\n  14,  0.78,  0.09,  0.01,\n  21,  0.92,  0.25,  0.05,\n  28,  0.99,   0.8,  0.18,\n  35, 0.995,  0.98,  0.34,\n  42, 0.999,  0.99,  0.48,\n  49, 0.999, 0.999,  0.74\n  ) "},{"path":"temporal-analysis.html","id":"visualize-the-dpcs","chapter":"2 Temporal analysis","heading":"2.2.1.3 Visualize the DPCs","text":"proceeding model selection fitting, let’s visualize three epidemics. code reproduces quite exactly top plot Fig. 4.15 ((Madden, Hughes, van den Bosch 2017a) page 94). appraisal curves might give us hint models best candidates.data entered wide format (DPCs different columns) need reshape tidyverse-suitable format, long format. pivot_longer function job reshaping wide long format can finally use ggplot function produce plot.three curves show sigmoid shape exception group 3 resembles exponential growth, reaching maximum value, thus suggesting incomplete epidemic. can easily eliminate monomolecular exponential models decide two non-flexible models: logistic Gompertz. , let’s proceed model fitting evaluate statistics supporting final decision. two modeling approaches model fitting epifitter: linear nonlinear parameter-estimation methods.","code":"\npepper %>% \n  pivot_longer(2:4, names_to =\"treat\", values_to = \"inc\") %>% \n  ggplot (aes(t, inc, \n              linetype = treat, \n              shape = treat, \n              group = treat))+\n  geom_point(size =2)+\n  geom_line()+\n  annotate(geom = \"text\", x = 15, y = 0.84, label = \"1\")+\n  annotate(geom = \"text\", x = 23, y = 0.6, label = \"2\")+\n  annotate(geom = \"text\", x = 32, y = 0.33, label = \"3\")+\n  labs(y = \"Disease incidence (y)\",\n       x = \"Time (days)\")+\n  theme(legend.position = \"none\")"},{"path":"temporal-analysis.html","id":"fitting-single-epidemics","chapter":"2 Temporal analysis","heading":"2.2.1.4 Fitting: single epidemics","text":"Among several options offered epifitter start simplest one, fit model single epidemics using linear regression approach. , fit_lin() requires two arguments: time (time) disease intensity (y) one vector stored dataframe.Since three epidemics, fit_lin() use three times. function produces list object six elements. Let’s first look Stats dataframe three lists named epi1 epi3.statistics model fit confirms initial guess predictions logistic Gompertz closer observations predictions models. much difference based statistics. However, pick one models, important inspect curves observed predicted values check model best curves.","code":"\nlibrary(epifitter)\n\nepi1 <- fit_lin(time = pepper$t,  \n  y = pepper$`1` )\nepi1$Stats##                 CCC r_squared   RSE\n## Gompertz      0.985     0.970 0.591\n## Monomolecular 0.984     0.968 0.543\n## Logistic      0.978     0.957 0.824\n## Exponential   0.784     0.645 0.670\nepi2 <- fit_lin(time = pepper$t,  \n  y = pepper$`2` )\nepi2$Stats##                 CCC r_squared   RSE\n## Logistic      0.996     0.992 0.452\n## Gompertz      0.971     0.943 0.841\n## Monomolecular 0.925     0.860 1.068\n## Exponential   0.897     0.813 1.202\nepi3 <- fit_lin(time = pepper$t,  \n  y = pepper$`3` )\nepi3$Stats##                 CCC r_squared   RSE\n## Logistic      0.983     0.967 0.605\n## Gompertz      0.983     0.966 0.226\n## Exponential   0.964     0.930 0.771\n## Monomolecular 0.859     0.753 0.253"},{"path":"temporal-analysis.html","id":"fitting-multiple-epidemics","chapter":"2 Temporal analysis","heading":"2.2.1.5 Fitting: multiple epidemics","text":"looking prediction, let’s use another handy function allows us simultaneously fit models multiple DPC data. Different fit_lin(), fit_multi() requires data structured long format column specifying epidemics.Let’s create new data set called pepper2 using data transposing functions tidyr package.Now fit models DPCs. Note name variable indicating DPC code needs informed strata_cols argument.Now let’s select statistics model fitting. , Epifitter ranks models based CCC (higher better) important check RSE well - lower better. fact, RSE important goal prediction.certain decision, let’s advance final step produce plots observed predicted values assessment time calling Data dataframe `epi_all list.Overall, logistic model seems better fit curves. Let’s produce plot prediction error versus time.plots confirms logistic model good fit overall errors epidemics combined scattered around non-error line.can produce plot visual inference differences parameters.","code":"\npepper2 <- pepper %>% \n  pivot_longer(2:4, names_to =\"treat\", values_to = \"inc\")\nepi_all <- fit_multi(\n  time_col = \"t\",\n  intensity_col = \"inc\",\n  data = pepper2,\n  strata_cols = \"treat\",\n  nlin = FALSE\n)\nepi_all$Parameters %>% \n  select(treat, model, best_model, RSE, CCC)##    treat         model best_model   RSE   CCC\n## 1      1      Gompertz          1 0.591 0.985\n## 2      1 Monomolecular          2 0.543 0.984\n## 3      1      Logistic          3 0.824 0.978\n## 4      1   Exponential          4 0.671 0.784\n## 5      2      Logistic          1 0.452 0.996\n## 6      2      Gompertz          2 0.841 0.971\n## 7      2 Monomolecular          3 1.068 0.925\n## 8      2   Exponential          4 1.202 0.897\n## 9      3      Logistic          1 0.605 0.983\n## 10     3      Gompertz          2 0.226 0.982\n## 11     3   Exponential          3 0.771 0.964\n## 12     3 Monomolecular          4 0.253 0.859\nepi_all$Data %>%\n filter(model %in% c(\"Gompertz\", \"Logistic\")) %>% \n  ggplot(aes(time, predicted, shape = treat)) +\n  geom_point(aes(time, y)) +\n  geom_line() +\n  facet_wrap(~ model) +\n coord_cartesian(ylim = c(0, 1)) + # set the max to 0.6\n  labs(\n    y = \"Disease incidence\",\n    x = \"Time (days after emergence)\"\n  )\nepi_all$Data %>%\n filter(model %in% c(\"Gompertz\", \"Logistic\")) %>% \n  ggplot(aes(time, predicted -y, shape = treat)) +\n  geom_point() +\n  geom_line() +\n  geom_hline(yintercept = 0, linetype =2)+\n  facet_wrap(~ model) +\n coord_cartesian(ylim = c(-0.4, 0.4)) + # set the max to 0.6\n  labs(\n    y = \"Prediction error\",\n    x = \"Time (days after emergence)\"\n  )\n  epi_all$Parameters %>%\n    filter(model == \"Logistic\") %>%\n    select(treat, y0, y0_ci_lwr, y0_ci_upr, r, r_ci_lwr, r_ci_upr \n)##   treat       y0 y0_ci_lwr y0_ci_upr     r r_ci_lwr r_ci_upr\n## 1     1 0.093504  0.027321   0.27473 0.210    0.166    0.255\n## 2     2 0.001373  0.000672   0.00280 0.278    0.254    0.303\n## 3     3 0.000813  0.000313   0.00211 0.175    0.143    0.208\np1 <- epi_all$Parameters %>%\n  filter(model == \"Logistic\") %>%\n  ggplot(aes(treat, r)) +\n  geom_point(size = 3) +\n  geom_errorbar(aes(ymin = r_ci_lwr, ymax = r_ci_upr),\n    width = 0,\n    size = 1\n  ) +\n  labs(\n    x = \"Time\",\n    y = \"r\"\n  )\n\np2 <- epi_all$Parameters %>%\n  filter(model == \"Logistic\") %>%\n  ggplot(aes(treat, 1 - exp(-y0))) +\n  geom_point(size = 3) +\n  geom_errorbar(aes(ymin = y0_ci_lwr, ymax = y0_ci_upr),\n    width = 0,\n    size = 1\n  ) +\n  labs(\n    x = \"Time\",\n    y = \"y0\"\n  )\n\np1 | p2"},{"path":"temporal-analysis.html","id":"designed-experiments","chapter":"2 Temporal analysis","heading":"2.2.2 Designed experiments","text":"next exercise, work disease data collected time plot unit (also called repeated measures) designed experiment evaluating comparing treatment effects., use dataset progress curves shown page 98 (Madden, Hughes, van den Bosch 2017a). curves represent incidence soybean plants symptomatic bud blight caused tobacco streak virus. Four treatments (different planting dates) evaluated randomized complete block design four replicates. four assessment time curve. data stored csv file loaded using read_csv() function stored dataframe called budblight.","code":""},{"path":"temporal-analysis.html","id":"loading-data","chapter":"2 Temporal analysis","heading":"2.2.2.1 Loading data","text":"Let’s look first six rows dataset check data type column. additional column representing replicates, called block.","code":"\nbudblight <- read_csv(\"data/bud-blight-soybean.csv\")\nhead(budblight)## # A tibble: 6 × 4\n##   treat  time block     y\n##   <chr> <dbl> <dbl> <dbl>\n## 1 PD1      30     1  0.1 \n## 2 PD1      30     2  0.3 \n## 3 PD1      30     3  0.1 \n## 4 PD1      30     4  0.1 \n## 5 PD1      40     1  0.3 \n## 6 PD1      40     2  0.38"},{"path":"temporal-analysis.html","id":"visualizing-the-dpcs","chapter":"2 Temporal analysis","heading":"2.2.2.2 Visualizing the DPCs","text":"Let’s look curves produce combo plot figure similar Fig. 4.17 book, without line predicted values.","code":"\np3 <- budblight %>%\n  ggplot(aes(\n    time, y,\n    group = block,\n    shape = factor(block)\n  )) +\n  geom_point(size = 1.5) +\n  ylim(0, 0.6) +\n  theme(legend.position = \"none\")+\n  facet_wrap(~treat, ncol =1)+\n  labs(y = \"Disease incidence\",\n       x = \"Time (days after emergence)\")\np4 <- budblight %>%\n  ggplot(aes(\n    time, log(1 / (1 - y)),\n    group = block,\n    shape = factor(block)\n  )) +\n  geom_point(size = 2) +\n  facet_wrap(~treat, ncol = 1) +\n  theme(legend.position = \"none\")+\n  labs(y = \"Transformed incidence\", x = \"Time (days after emergence)\")\n\np3 | p4"},{"path":"temporal-analysis.html","id":"model-fitting-1","chapter":"2 Temporal analysis","heading":"2.2.2.3 Model fitting","text":"Remember first step model selection visual appraisal curve data linearized model transformation. case curves represent complete epidemics (close 100%) appraisal absolute rate (difference y two times) time also helpful.treatments , looks like curves typical monocyclic disease (case soybean bud blight), monomolecular usually good fit, models also possible well. exercise, use linear nonlinear estimation method.","code":""},{"path":"temporal-analysis.html","id":"linear-regression","chapter":"2 Temporal analysis","heading":"2.2.2.3.1 Linear regression","text":"convenience, use fit_multi() handle multiple epidemics. function returns list object series statistics provided aid model selection parameter estimation. need provide names columns (arguments): assessment time (time_col), disease incidence (intensity_col), treatment (strata_cols).Let’s look well four models fitted data. Epifitter suggests best fitted model (1 4, 1 best) treatment. Let’s look statistics model fitting.now extract values parameter estimated fit monomolecular model.Now visualize fit monomolecular model (using filter function - see ) data together observed data reproduce right plots Fig. 4.17 book.Now can plot means respective 95% confidence interval apparent infection rate (\\(r\\)) initial inoculum (\\(y_0\\)) visual inference.","code":"\nlin1 <- fit_multi(\n  time_col = \"time\",\n  intensity_col = \"y\",\n  data = budblight,\n  strata_cols = \"treat\",\n  nlin = FALSE\n)\n  lin1$Parameters %>% \n    select(treat, best_model, model, CCC, RSE)##    treat best_model         model   CCC    RSE\n## 1    PD1          1 Monomolecular 0.935 0.0981\n## 2    PD1          2      Gompertz 0.904 0.2223\n## 3    PD1          3      Logistic 0.871 0.4475\n## 4    PD1          4   Exponential 0.828 0.3612\n## 5    PD2          1 Monomolecular 0.955 0.0700\n## 6    PD2          2      Gompertz 0.931 0.1794\n## 7    PD2          3      Logistic 0.906 0.3877\n## 8    PD2          4   Exponential 0.880 0.3268\n## 9    PD3          1 Monomolecular 0.939 0.0683\n## 10   PD3          2      Gompertz 0.929 0.1716\n## 11   PD3          3      Logistic 0.909 0.3905\n## 12   PD3          4   Exponential 0.890 0.3388\n## 13   PD4          1      Gompertz 0.923 0.1747\n## 14   PD4          2 Monomolecular 0.895 0.0649\n## 15   PD4          3      Logistic 0.891 0.5241\n## 16   PD4          4   Exponential 0.874 0.4977\n  lin1$Parameters %>%\n  filter(model == \"Monomolecular\") %>%\n  select(treat, y0, r)##   treat     y0      r\n## 1   PD1 -0.573 0.0220\n## 2   PD2 -0.522 0.0190\n## 3   PD3 -0.449 0.0159\n## 4   PD4 -0.362 0.0112\nlin1$Data %>%\n  filter(model == \"Monomolecular\") %>%\n  ggplot(aes(time, predicted)) +\n  geom_point(aes(time, y)) +\n  geom_line(size = 0.5) +\n  facet_wrap(~treat) +\n  coord_cartesian(ylim = c(0, 0.6)) + # set the max to 0.6\n  labs(\n    y = \"Disease incidence\",\n    x = \"Time (days after emergence)\"\n  )\np5 <- lin1$Parameters %>%\n  filter(model == \"Monomolecular\") %>%\n  ggplot(aes(treat, r)) +\n  geom_point(size = 3) +\n  geom_errorbar(aes(ymin = r_ci_lwr, ymax = r_ci_upr),\n    width = 0,\n    size = 1\n  ) +\n  labs(\n    x = \"Time\",\n    y = \"r\"\n  )\n\np6 <- lin1$Parameters %>%\n  filter(model == \"Monomolecular\") %>%\n  ggplot(aes(treat, 1 - exp(-y0))) +\n  geom_point(size = 3) +\n  geom_errorbar(aes(ymin = y0_ci_lwr, ymax = y0_ci_upr),\n    width = 0,\n    size = 1\n  ) +\n  labs(\n    x = \"Time\",\n    y = \"y0\"\n  )\n\np5 | p2"},{"path":"temporal-analysis.html","id":"non-linear-regression","chapter":"2 Temporal analysis","heading":"2.2.2.3.2 Non-linear regression","text":"estimate parameters using non-linear approach, repeat arguments fit_multi function, include additional argument nlin set TRUE.Let’s check statistics model fit.now obtain two parameters interest. Note values sames estimated using linear regression, similar highly correlated.","code":"\nnlin1 <- fit_multi(\n  time_col = \"time\",\n  intensity_col = \"y\",\n  data = budblight,\n  strata_cols = \"treat\",\n  nlin = TRUE\n)\nnlin1$Parameters %>%\n  select(treat, model, CCC, RSE, best_model)##    treat         model   CCC    RSE best_model\n## 1    PD1 Monomolecular 0.938 0.0613          1\n## 2    PD1      Gompertz 0.917 0.0699          2\n## 3    PD1      Logistic 0.896 0.0770          3\n## 4    PD1   Exponential 0.854 0.0880          4\n## 5    PD2 Monomolecular 0.967 0.0421          1\n## 6    PD2      Gompertz 0.935 0.0573          2\n## 7    PD2      Logistic 0.908 0.0666          3\n## 8    PD2   Exponential 0.870 0.0767          4\n## 9    PD3 Monomolecular 0.957 0.0427          1\n## 10   PD3      Gompertz 0.926 0.0544          2\n## 11   PD3      Logistic 0.900 0.0620          3\n## 12   PD3   Exponential 0.870 0.0689          4\n## 13   PD4 Monomolecular 0.918 0.0460          1\n## 14   PD4      Gompertz 0.909 0.0479          2\n## 15   PD4      Logistic 0.894 0.0508          3\n## 16   PD4   Exponential 0.884 0.0527          4\n  nlin1$Parameters %>%\n    filter(model == \"Monomolecular\") %>%\n    select(treat, y0, r)##   treat     y0      r\n## 1   PD1 -0.707 0.0238\n## 2   PD2 -0.634 0.0206\n## 3   PD3 -0.505 0.0167\n## 4   PD4 -0.350 0.0109\np7 <- nlin1$Parameters %>%\n  filter(model == \"Monomolecular\") %>%\n  ggplot(aes(treat, r)) +\n  geom_point(size = 3) +\n  geom_errorbar(aes(ymin = r_ci_lwr, ymax = r_ci_upr),\n    width = 0,\n    size = 1\n  ) +\n  labs(\n    x = \"Time\",\n    y = \"r\"\n  )\n\np8 <- nlin1$Parameters %>%\n  filter(model == \"Monomolecular\") %>%\n  ggplot(aes(treat, y0)) +\n  geom_point(size = 3) +\n  geom_errorbar(aes(ymin = y0_ci_lwr, ymax = y0_ci_upr),\n    width = 0,\n    size = 1\n  ) +\n  labs(\n    x = \"Time\",\n    y = \"y0\"\n  )\n\np7 | p8"},{"path":"spatial-gradients.html","id":"spatial-gradients","chapter":"3 Spatial gradients","heading":"3 Spatial gradients","text":"","code":""},{"path":"spatial-gradients.html","id":"models","chapter":"3 Spatial gradients","heading":"3.1 Models","text":"modeling disease gradients, distance represented \\(x\\), continuous variable can expressed various units (cm, m, km, etc). gradient models, similar population dynamics models (disease progress) deterministic type. difference , disease progress curves, disease intensity tends increase increasing time, disease gradients disease intensity tends decrease increasing distance source inoculum. Two models commonly fitted data disease gradients. details models can obtained tutorial.","code":""},{"path":"spatial-gradients.html","id":"exponential-model","chapter":"3 Spatial gradients","heading":"3.1.1 Exponential model","text":"exponential model also known Kiyosawa & Shiyomi model. differential exponential model given \\(\\frac{dy}{dx}\\) = \\(-b_{E}.y\\) ,\\(b_{E}\\) exponential form rate decline \\(y\\) disease intensity. model suggests \\(y\\) (disease intensity) greater close source inoculum, distance zero. integral form model given \\(y = . e^{-b.x}\\) ,\\(\\) disease intensity distance zero \\(b\\) rate decline, case negative disease intensity decreases increase distance inoculum source. Let’s make plot two disease gradients varying parameters model.First need load essential packages programming, customizing outputs defining global ggplot theme.Set parameters exponential model two rates inoculum source:following code allows visualize model predictions.","code":"\nlibrary(tidyverse)\nlibrary(ggthemes)\nlibrary(patchwork)\ntheme_set(theme_light())\nknitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)\na1 <- 0.2 # y at distance zero for gradient 1\na2 <- 0.2 # y at distance zero for gradient 2\nb1 <- 0.1 # decline rate for gradient 1\nb2 <- 0.05 # decline rate for gradient 2\nmax1 <- 80 # maximum distance for gradient 1\nmax2 <- 80 # maximum distance for gradient 2\ndat <- data.frame(x = seq(1:max1), y = seq(0:a1))\ndat %>%\n  ggplot(aes(x, y)) +\n  stat_function(fun = function(x) a1 * exp(-b1 * x), linetype = 1) +\n  stat_function(fun = function(x) a2 * exp(-b2 * x), linetype = 2) +\n  ylim(0, a1) +\n  annotate(\"text\", x = 20, y = 0.04, label = \"b = 0.1\") +\n  annotate(\"text\", x = 20, y = 0.10, label = \"b = 0.05\") +\n  labs(\n    title = \"Exponential model\",\n    subtitle = \"\",\n    x = \"Distance (m)\",\n    y = \"Disease incidence (proportion)\"\n  )"},{"path":"spatial-gradients.html","id":"power-law-model","chapter":"3 Spatial gradients","heading":"3.1.2 Power law model","text":"Also known modified Gregory’s model (Gregory pioneer use model describe plant disease gradients). power law model, \\(Y\\) proportional power distance, given :\\(Y = a_{P}.x - b_{P}\\)\\(a_{P}\\) \\(b_{P}\\) two parameters power law model. differ exponential closer \\(x\\) zero, \\(Y\\) indefinitely large (meaningful biologically). However, model can still useful produces realistic values distance \\(x\\) away source. values \\(a_{P}\\) parameter interpreted accord scale \\(x\\), whether centimeters meters. distance source first measure away source 0.5m, appropriate record distance cm m km.\\(y\\) distance zero source undefined using power law model, usually modified addition positive constant \\(C\\) \\(x\\):\\(Y = a_{P}.(x + C) - b_{P}\\)reason, model named modified power law. , constant \\(C\\) unit \\(x\\). distance zero, positive constant term express size inoculum source. words, \\(\\) parameter theoretical value \\(Y\\) distance \\(1-C\\) center inoculum source.Let’s plot two gradients two rate parameters modified power law model:differential equation power law model given :\\(\\frac{dy}{dx}\\) = \\(\\frac{-b_{P}.Y}{x - C}\\)Similar exponential model, \\(\\frac{dy}{dx}\\) proportional \\(Y\\), meaning gradient steeper (negative) highest disease intensity value, usually closer source.","code":"\nC <- 0.5\na1 <- 0.2 # y at zero distance for gradient 1\na2 <- 0.2 # y at zero distance for gradient 2\nb1 <- 0.5 # decline rate for gradient 1\nb2 <- 0.7 # decline rate for gradient 2\nmax1 <- 80 # maximum distance for gradient 1\nmax2 <- 80 # maximum distance for gradient 2\ndat2 <- data.frame(x = seq(1:max1), y = seq(0:a1))\n\n\ndat2 %>%\n  ggplot(aes(x, y)) +\n  stat_function(fun = function(x) a1 * ((x + C)^-b1), linetype = 1) +\n  stat_function(fun = function(x) a2 * ((x + C)^-b2), linetype = 2) +\n  ylim(0, a1 - 0.02) +\n  annotate(\"text\", x = 20, y = 0.03, label = \"b = 0.1\") +\n  annotate(\"text\", x = 20, y = 0.06, label = \"b = 0.05\") +\n  labs(\n    title = \"Modified Power Law\",\n    subtitle = \"\",\n    x = \"Distance (m)\",\n    y = \"Disease incidence\"\n  )"},{"path":"spatial-gradients.html","id":"linearization-of-the-models","chapter":"3 Spatial gradients","heading":"3.2 Linearization of the models","text":"","code":""},{"path":"spatial-gradients.html","id":"transformations-of-y","chapter":"3 Spatial gradients","heading":"3.2.1 Transformations of y","text":"gradient models, similar temporal disease models, non linear parameters. model intrinsically linear transformations applied (according model) sides equations. linear model generic state given \\(y* = * + bx\\) ,asterisk \\(\\) indicated one transformations applied \\(y\\) produced linear model. Note \\(*\\) transformed version initial disease intensity, needs returned original scale according respective back-transformation. Follows linearized form two common gradient models.\\(ln(y) = ln(a_{E}) - b_{E}. x\\)\\(ln(y) = ln(a_{P}) - b_{E}. ln(x+C)\\)","code":""},{"path":"spatial-gradients.html","id":"plot-for-the-linearized-form-of-models","chapter":"3 Spatial gradients","heading":"3.2.2 Plot for the linearized form of models","text":"Let’s visualize linearization exponential model two different slopes (gradient 1 2). Note transformation used \\(ln(y)\\).Follows linearization modified power law model.Follows linearization modified power law model. Note transformation used \\(ln(y)\\) \\(ln(x+C)\\) .","code":"\nC <- 0.5\na1 <- 0.2 # y at zero distance for gradient 1\na2 <- 0.2 # y at zero distance for gradient 2\nb1 <- 0.5 # decline rate for gradient 1\nb2 <- 0.7 # decline rate for gradient 2\nmax1 <- 80 # maximum distance for gradient 1\nmax2 <- 80 # maximum distance for gradient 2\ndat2 <- data.frame(x = seq(1:max1), y = seq(0:a1))\n\ndat2 %>%\n  ggplot(aes(x, y)) +\n  stat_function(fun = function(x) log(a1) - (b1 * x), linetype = 1) +\n  stat_function(fun = function(x) log(a2) - (b2 * x), linetype = 2) +\n  labs(\n    title = \"Exponential\",\n    subtitle = \"\",\n    x = \"log of distance (m)\",\n    y = \"log of disease incidence\"\n  )\nC <- 0.5\na1 <- 0.2 # y at zero distance for gradient 1\na2 <- 0.2 # y at zero distance for gradient 2\nb1 <- 0.5 # decline rate for gradient 1\nb2 <- 0.7 # decline rate for gradient 2\nmax1 <- log(80) # maximum distance for gradient 1\nmax2 <- log(80) # maximum distance for gradient 2\ndat2 <- data.frame(x = seq(1:max1), y = seq(0:a1))\n\ndat2 %>%\n  ggplot(aes(x, y)) +\n  stat_function(fun = function(x) log(a1) - (b1 * log(x + C)), linetype = 1) +\n  stat_function(fun = function(x) log(a2) - (b2 * log(x + C)), linetype = 2) +\n  labs(\n    title = \"Modified Power Law\",\n    subtitle = \"\",\n    x = \"log of distance (m)\",\n    y = \"log of disease incidence\"\n  )"},{"path":"spatial-gradients.html","id":"model-fitting-2","chapter":"3 Spatial gradients","heading":"3.3 Model fitting","text":"","code":""},{"path":"spatial-gradients.html","id":"dataset","chapter":"3 Spatial gradients","heading":"3.3.1 Dataset","text":"hypothetical data shows gradient number lesions counted varying distances meters source. Let’s create two vectors, one distances \\(x\\) lesion count \\(Y\\), dataframe combining two vectors.","code":"\n# create the two vectors\nx <- c(0.8, 1.6, 2.4, 3.2, 4, 7.2, 12, 15.2, 21.6, 28.8)\nY <- c(184.9, 113.3, 113.3, 64.1, 25, 8, 4.3, 2.5, 1, 0.8)\ngrad1 <- data.frame(x, Y) # create the dataframe\ngrad1 # show the gradient##       x     Y\n## 1   0.8 184.9\n## 2   1.6 113.3\n## 3   2.4 113.3\n## 4   3.2  64.1\n## 5   4.0  25.0\n## 6   7.2   8.0\n## 7  12.0   4.3\n## 8  15.2   2.5\n## 9  21.6   1.0\n## 10 28.8   0.8"},{"path":"spatial-gradients.html","id":"visualize-the-gradient","chapter":"3 Spatial gradients","heading":"3.3.2 Visualize the gradient","text":"","code":"\ngrad1 %>% \n  ggplot(aes(x, Y))+\n  geom_point()+\n  geom_line()+\n  labs(y = \"Lesion count\",\n       x = \"Distance (m)\")"},{"path":"spatial-gradients.html","id":"linear-regression-1","chapter":"3 Spatial gradients","heading":"3.3.3 Linear regression","text":"linear regression model fitted transformed variables according model. higher coefficient determination, better fit model data.Exponential modelPower law model \\(C = 0\\).Power law model \\(C = 0.4\\).Graphs fitted modelsExponentialPower law modelModified power law modelConclusion: modified power law model provided best fit.","code":"\nreg_exp <- lm(log(Y) ~ x, data = grad1)\nsummary(reg_exp)## \n## Call:\n## lm(formula = log(Y) ~ x, data = grad1)\n## \n## Residuals:\n##     Min      1Q  Median      3Q     Max \n## -1.0487 -0.5897 -0.0014  0.5957  0.9955 \n## \n## Coefficients:\n##             Estimate Std. Error t value Pr(>|t|)    \n## (Intercept)   4.5771     0.3522   13.00  1.2e-06 ***\n## x            -0.2012     0.0266   -7.58  6.4e-05 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 0.761 on 8 degrees of freedom\n## Multiple R-squared:  0.878,  Adjusted R-squared:  0.862 \n## F-statistic: 57.4 on 1 and 8 DF,  p-value: 6.45e-05\nreg_p <- lm(log(Y) ~ log(x), data = grad1)\nsummary(reg_p)## \n## Call:\n## lm(formula = log(Y) ~ log(x), data = grad1)\n## \n## Residuals:\n##     Min      1Q  Median      3Q     Max \n## -0.7228 -0.1199 -0.0315  0.0876  0.6527 \n## \n## Coefficients:\n##             Estimate Std. Error t value Pr(>|t|)    \n## (Intercept)    5.564      0.246    22.7  1.5e-08 ***\n## log(x)        -1.698      0.119   -14.3  5.7e-07 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 0.423 on 8 degrees of freedom\n## Multiple R-squared:  0.962,  Adjusted R-squared:  0.957 \n## F-statistic:  203 on 1 and 8 DF,  p-value: 5.71e-07\nreg_pm <- lm(log(Y) ~ log(x + 0.4), data = grad1)\nsummary(reg_pm)## \n## Call:\n## lm(formula = log(Y) ~ log(x + 0.4), data = grad1)\n## \n## Residuals:\n##     Min      1Q  Median      3Q     Max \n## -0.5373 -0.1726 -0.0365  0.0845  0.5693 \n## \n## Coefficients:\n##              Estimate Std. Error t value Pr(>|t|)    \n## (Intercept)     6.101      0.228    26.7  4.1e-09 ***\n## log(x + 0.4)   -1.884      0.108   -17.4  1.2e-07 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 0.349 on 8 degrees of freedom\n## Multiple R-squared:  0.974,  Adjusted R-squared:  0.971 \n## F-statistic:  302 on 1 and 8 DF,  p-value: 1.22e-07\ngrad1 %>% \n  ggplot(aes(x, log(Y)))+\n  geom_point()+\n  geom_line()+\n  geom_abline(slope = coef(reg_exp)[[2]], intercept = coef(reg_exp)[[1]])+\n labs(y = \"Log of Lesion count\",\n       x = \"Distance (m)\")\ngrad1 %>% \n  ggplot(aes(log(x), log(Y)))+\n  geom_point()+\n  geom_line()+\n  geom_abline(slope = coef(reg_p)[[2]], intercept = coef(reg_p)[[1]])+\n labs(y = \"Log of Lesion count\",\n       x = \"Log of distance\")\ngrad1 %>% \n  ggplot(aes(log(x+0.4), log(Y)))+\n  geom_point()+\n  geom_line()+\n  geom_abline(slope = coef(reg_pm)[[2]], intercept = coef(reg_pm)[[1]])+\n labs(y = \"Log of Lesion count\",\n       x = \"Log of distance (m)\")"},{"path":"spatial-patterns.html","id":"spatial-patterns","chapter":"4 Spatial patterns","heading":"4 Spatial patterns","text":"","code":""},{"path":"spatial-patterns.html","id":"introduction","chapter":"4 Spatial patterns","heading":"4.1 Introduction","text":"spatial disease pattern can defined arrangement diseased entities relative architecture host crop (Madden, Hughes, van den Bosch 2017b). arrangement realization underlying dispersal pathogen, one several sources within /outside area interest, influence physical, biological environmental factors.study spatial patterns conducted specific time multiple times epidemic. assessed multiple times, spatial temporal processes can characterized. epidemics change time, expected spatial patterns constant change time well. Usually, plant pathologists interested determining spatial patterns one various spatial scales, depending objective study. scale interest may leaf root, plant, field, municipality, state, country even intercontinental area. diseased units observed may vary lesions single leaf diseased fields large production region.patterns can classified two main types occur naturally: random aggregated. random pattern originates chances units (leaf, plant, crop) infected equal low, largely independent . aggregated spatial patterns, chances unequal dependency among units, example, healthy unit close diseased unit higher risk distant units.range techniques, based statistical tests, can used detect deviations randomness space choice methods depends scale observation. Usually, one test applied different scales interest depending data collected. Three general categories statistical tests can determined based spatial scale type data collected: position diseased units within row series rows (plant plant); quadrat plot count data; distance among diseased units.","code":""},{"path":"spatial-patterns.html","id":"status-within-a-row-plant-to-plant","chapter":"4 Spatial patterns","heading":"4.2 Status within a row (plant to plant)","text":", status unit (usually plant) noted binary. plant either diseased (D 1) healthy (H 0). data usually collected crop row, giving rise series binary data (Fig. 1).Representation series units (plants) status either diseased (D) healthy (H)Several statistical tests can used detect deviation randomness. commonly used tests runs, doublets joint count statistics.","code":""},{"path":"spatial-patterns.html","id":"runs-test","chapter":"4 Spatial patterns","heading":"4.2.1 Runs test","text":"runs test. Description.Let’s create series binary data representing crop row 20 plants, shown Figure .can visualize series:runs test can executed using runs.test function randtests package. null hypothesis randomness. test returns P-value.","code":"\ny1 <- c(1, 1, 1, 0, 0,0,0,0, 1,0,0,0,0,1,1,0,0,0,1,1)\nx1 <- c(1:20) # position of each plant\nz1 <- factor(1)\nrow1 <- data.frame(x1, y1, z1) # create a dataframe\nlibrary(tidyverse)\nrow1 %>% \n  ggplot(aes(x1, z1, label = x1, color = factor(y1)))+\n  geom_point(shape =15, size =5)+\n  theme_void()+\n  geom_text(vjust = 0, nudge_y = 0.05)+\n  labs(color = \"Status\")\nlibrary(randtests)\nrun1 <- runs.test(row1$y1, threshold = 0.5)\nrun1## \n##  Runs Test\n## \n## data:  row1$y1\n## statistic = -2, runs = 7, n1 = 8, n2 = 12, n = 20, p-value = 0.08\n## alternative hypothesis: nonrandomness"},{"path":"spatial-patterns.html","id":"doublets","chapter":"4 Spatial patterns","heading":"4.2.2 Doublets","text":"doublets test. Description.Let’s mannualy produce code execute doublets test. facilitate, can create function name doublet.test. argument needed vector binary data.","code":"\ndoublet.test <- function(x) {\nS <- x\nmatrix <- cbind(S[-length(S)], S[-1])\npairs <- table(data.frame(matrix))\nDb <- pairs[2,2]\nN <- length(S) \nd = sum(S) \nNEDb = d *((d -1)/N)\nDPDb = sqrt ( NEDb * (1 - (2 / N)))\nZDb = (Db - NEDb)/ DPDb \npvalue <- 1-(pnorm(abs(ZDb)))\nresult <- ifelse(ZDb >= 1.64, \nc(\"The spatial pattern is aggregated\"), c(\"The spatial pattern is random\")) \nres <- c(result, \"P-value:\", pvalue)\nreturn(res)\n}\n\n# Run the function calling the vector\ndoublet.test(row1$y1)## [1] \"The spatial pattern is random\" \"P-value:\"                     \n## [3] \"0.224845898984446\""},{"path":"spatial-patterns.html","id":"joint-count","chapter":"4 Spatial patterns","heading":"4.2.3 Joint count","text":"Joint count statistics. Description.Let’s use join.count function spdep package perform joint count test.","code":"\n# Enter the data\nS2 <- c(1,1,1,1,0,\n       0,1,0,0,1,\n       1,0,1,0,0,\n       1,0,0,1,1,\n       0,0,0,0,1)\n  \nlibrary (spdep)\nnb <- cell2nb(5, 5, \n              type=\"rook\", \n              torus=FALSE)\njc_rook <- joincount.test(factor(S2), nb2listw(nb, style=\"B\"))\njc_rook## \n##  Join count test under nonfree sampling\n## \n## data:  factor(S2) \n## weights: nb2listw(nb, style = \"B\") \n## \n## Std. deviate for 0 = -0.2, p-value = 0.6\n## alternative hypothesis: greater\n## sample estimates:\n## Same colour statistic           Expectation              Variance \n##                 10.00                 10.40                  3.17 \n## \n## \n##  Join count test under nonfree sampling\n## \n## data:  factor(S2) \n## weights: nb2listw(nb, style = \"B\") \n## \n## Std. deviate for 1 = -1, p-value = 0.8\n## alternative hypothesis: greater\n## sample estimates:\n## Same colour statistic           Expectation              Variance \n##                  7.00                  8.80                  3.03\n#joincount.mc(factor(S2), nb2listw(nb, style=\"B\"), nsim = 1000)"}]
