{
  "articles": [
    {
      "path": "about.html",
      "title": "About this site",
      "description": "Some additional details about the website",
      "author": [],
      "contents": "\n\n\n\n",
      "last_modified": "2020-12-09T09:31:50-03:00"
    },
    {
      "path": "index.html",
      "title": "Modeling plant disease epidemics in R ",
      "description": "Prof. [Emerson Del Ponte](https://emersondelponte.netlify.app/)<br>\nUniversidade Federal de Viçosa<br><br>\n",
      "author": [],
      "contents": "\n\nContents\nAbout\nWant to contribute?\n\nAbout\nThis tutorial on Epidemiology using R was prepared to support several lectures I’ve given as Guest Lecturer in the Plant Disease Epidemiology course offered to students of the Professional Masters in Plant Health in Sustainable Cropping Systems. The same materials have been used in my graduate course on Plant Disease Epidemiology FIP602 offered every year at the Universidade Federal de Viçosa.\nWant to contribute?\nIf you want to contribute and make this better, your help is very welcome! If you spot typo and broken link anywhere or something that is not correct, please let me know. You can contact Emerson via twitter or email (delponte@ufv.br).\n\n\n\n",
      "last_modified": "2020-12-09T14:40:37-03:00"
    },
    {
      "path": "time-individual-level-models.html",
      "title": "Simulation",
      "description": "Simulating..",
      "author": [],
      "contents": "\n\nContents\nIntroduction\nHLIR function\nSetting up\nSolving equation\nVisualizing HLIR\n\n\nIntroduction\n\n\nlibrary(tidyverse)\nlibrary(deSolve)\n\n\n\nHLIR function\n\n\nHLIR_fun <- function(t, y, par) {\n  # Variables\n  H <- y[1]\n  L <- y[2]\n  I <- y[3]\n  R <- y[4]\n  beta <- par$beta\n  gama <- par$gama\n  mu <- par$mu\n\n  # Right hand side of the model\n  dH <- -beta * H * I\n  dL <- beta * H * I - gama * L\n  dI <- gama * L - mu * I\n  dR <- mu * I\n  return(list(c(dH, dL, dI, dR)))\n}\n\n\n\nSetting up\n\n\n# Set up parameters\n\nbeta <- 0.002 # Per capita rate of infection of susceptible hosts\ngama <- 1 / 6 #  Rate at which exposed (i.e., latently infected) hosts become infectious\ndelta <- 15 # infectious period\nmu <- 1 / delta\nInitCond <- c(1000, 1, 0, 0)\n\n\n\nSolving equation\n\n\nsteps <- seq(1, 60, by = 1)\nparms <- list(beta = beta, gama = gama, mu = mu)\nHLIR <- ode(InitCond, steps, HLIR_fun, parms)\nepidemics <- data.frame(time = HLIR[, 1], H = HLIR[, 2], L = HLIR[, 3], I = HLIR[, 4], R = HLIR[, 5])\n\n\n\nVisualizing HLIR\n\n\nlibrary(ggthemes)\np1 <- epidemics %>%\n  ggplot() +\n  geom_line(aes(time, H, color = \"H\"), size = 2) +\n  geom_line(aes(time, L, color = \"L\"), size = 2) +\n  geom_line(aes(time, I, color = \"I\"), size = 2) +\n  geom_line(aes(time, R, color = \"R\"), size = 2) +\n  geom_line(aes(time, I+R, color = \"DIS\"), size =2, linetype = 2)+\n  labs(y = \"Population size (count)\", x = \"Time (days)\", color = \"Sites\") +\n  theme_few()\n p1\n\n\n\n\n\n\n\n",
      "last_modified": "2020-12-09T09:31:59-03:00"
    },
    {
      "path": "time-multiple-curves-mean-value.html",
      "title": "Model fitting",
      "description": "Fitting epidemiological models to diseae progress curve data from both non-replicated and designed experiments.",
      "author": [],
      "contents": "\n\nContents\nIntroduction\nNon-replicated\nInitial setup\nEntering data\nVisualize the DPCs\n\n\nFitting: single epidemics\nFitting: multiple epidemics\n\n\nDesigned experiments\nLoading data\nVisualizing the DPCs\nModel fitting\n\n\n\n\nIntroduction\nIn this tutorial you will learn how to fit models to multiple actual disease progress curves (DPCs) data obtained from the literature. I will demonstrate how to fit and select the models using a new R package called epifitter. A few user friendly functions will help us decide which model to choose to obtain the parameters of interest and further compare the epidemics.\nTo illustrate, I will use two datasets available from Chapter 3 from the book, Study of Plant Disease Epidemics, authored by Prof. Madden and collaborators (Madden et al. 2007). In the book, SAS codes are presented to perform a few analysis. We then provide an alternative code for performing similar analysis, although not perfectly reproducing the results from the book.\nNon-replicated\nHere we will compare three DPCs of the incidence of tobacco etch, a virus disease, in peppers. Evaluations of incidence were evaluated at a 7-day interval up to 49 days.The data are available in chapter 4 (page 93). Let’s input the data manually and create a data frame. First column is the assessment time and the other columns correspond to the treatments, called groups in the book, from 1 to 3.\nInitial setup\nLoad essential packages and set parameters recursively.\n\n\n\nEntering data\n\n\npepper <- \n  tibble::tribble(\n   ~t,  ~`1`,  ~`2`,  ~`3`,\n   0,  0.08, 0.001, 0.001,\n   7,  0.13,  0.01, 0.001,\n  14,  0.78,  0.09,  0.01,\n  21,  0.92,  0.25,  0.05,\n  28,  0.99,   0.8,  0.18,\n  35, 0.995,  0.98,  0.34,\n  42, 0.999,  0.99,  0.48,\n  49, 0.999, 0.999,  0.74\n  ) \n\n\n\nVisualize the DPCs\nBefore proceeding with model selection and fitting, let’s visualize the three epidemics. The code below reproduces quite exactly the top plot of Fig. 4.15 (Madden et al. 2007; page 94). The appraisal of the curves might give us a hint on which models are the best candidates.\nBecause the data was entered in the wide format (each DPCs in a different columns) we need to reshape it to the tidyverse-suitable format, which is the long format. The pivot_longer function will do the job of reshaping from wide to long format so we can finally use the ggplot function to produce the plot.\n\n\npepper %>% \n  pivot_longer(2:4, names_to =\"treat\", values_to = \"inc\") %>% \n  ggplot (aes(t, inc, \n              linetype = treat, \n              shape = treat, \n              group = treat))+\n  geom_point(size =2)+\n  geom_line()+\n  annotate(geom = \"text\", x = 15, y = 0.84, label = \"1\")+\n  annotate(geom = \"text\", x = 23, y = 0.6, label = \"2\")+\n  annotate(geom = \"text\", x = 32, y = 0.33, label = \"3\")+\n  labs(y = \"Disease incidence (y)\",\n       x = \"Time (days)\")+\n  theme(legend.position = \"none\")\n\n\n\n\n\nMost of the three curves appear to follow a sigmoid shape with the exception of group 3 that resembles an exponential growth, not reaching the maximum value, and thus suggesting an incomplete epidemic. We can easily discard the monomolecular and exponential models and decided on the other two non-flexible models: logistic or Gompertz. To do that, let’s proceed to model fitting and evaluate the statistics for supporting a final decision. There are two modeling approaches for model fitting in epifitter: the linear or nonlinear parameter-estimation methods.\nFitting: single epidemics\nAmong the several options offered by epifitter we start with the simplest one, which is fit a model to a single epidemics using the linear regression approach. For such, the fit_lin() requires two arguments: time (time) and disease intensity (y) each one as a vector stored or not in a dataframe.\nSince we have three epidemics, fit_lin() will be use three times. The function produces a list object with six elements. Let’s first look at the Stats dataframe of each of the three lists named epi1 to epi3.\n\n\nlibrary(epifitter)\n\nepi1 <- fit_lin(time = pepper$t,  \n  y = pepper$`1` )\nepi1$Stats\n\n\n                CCC r_squared   RSE\nGompertz      0.985     0.970 0.591\nMonomolecular 0.984     0.968 0.543\nLogistic      0.978     0.957 0.824\nExponential   0.784     0.645 0.670\n\n\n\nepi2 <- fit_lin(time = pepper$t,  \n  y = pepper$`2` )\nepi2$Stats\n\n\n                CCC r_squared   RSE\nLogistic      0.996     0.992 0.452\nGompertz      0.971     0.943 0.841\nMonomolecular 0.925     0.860 1.068\nExponential   0.897     0.813 1.202\n\n\n\nepi3 <- fit_lin(time = pepper$t,  \n  y = pepper$`3` )\nepi3$Stats\n\n\n                CCC r_squared   RSE\nLogistic      0.983     0.967 0.605\nGompertz      0.983     0.966 0.226\nExponential   0.964     0.930 0.771\nMonomolecular 0.859     0.753 0.253\n\nThe statistics of the model fit confirms our initial guess that the predictions by the logistic or the Gompertz are closer to the observations than predictions by the other models. There is no much difference between them based on these statistics. However, to pick one of the models, it is important to inspect the curves with the observed and predicted values to check which model is best for all curves.\nFitting: multiple epidemics\nBefore looking at the prediction, let’s use another handy function that allows us to simultaneously fit the models to multiple DPC data. Different from fit_lin(), fit_multi() requires the data to be structured in the long format where there is a column specifying each of the epidemics.\nLet’s then create a new data set called pepper2 using the data transposing functions of the tidyr package.\n\n\npepper2 <- pepper %>% \n  pivot_longer(2:4, names_to =\"treat\", values_to = \"inc\")\n\n\n\nNow we fit the models to all DPCs. Note that the name of the variable indicating the DPC code needs to be informed in strata_cols argument.\n\n\nepi_all <- fit_multi(\n  time_col = \"t\",\n  intensity_col = \"inc\",\n  data = pepper2,\n  strata_cols = \"treat\",\n  nlin = FALSE\n)\n\n\n\nNow let’s select the statistics of model fitting. Again, Epifitter ranks the models based on the CCC (the higher the better) but it is important to check the RSE as well - the lower the better. In fact, the RSE is more important when the goal is prediction.\n\n\nepi_all$Parameters %>% \n  select(treat, model, best_model, RSE, CCC)\n\n\n   treat         model best_model   RSE   CCC\n1      1      Gompertz          1 0.591 0.985\n2      1 Monomolecular          2 0.543 0.984\n3      1      Logistic          3 0.824 0.978\n4      1   Exponential          4 0.671 0.784\n5      2      Logistic          1 0.452 0.996\n6      2      Gompertz          2 0.841 0.971\n7      2 Monomolecular          3 1.068 0.925\n8      2   Exponential          4 1.202 0.897\n9      3      Logistic          1 0.605 0.983\n10     3      Gompertz          2 0.226 0.982\n11     3   Exponential          3 0.771 0.964\n12     3 Monomolecular          4 0.253 0.859\n\nTo be more certain about our decision, let’s advance to the final step which is to produce the plots with the observed and predicted values for each assessment time by calling the Data dataframe of the `epi_all list.\n\n\nepi_all$Data %>%\n filter(model %in% c(\"Gompertz\", \"Logistic\")) %>% \n  ggplot(aes(time, predicted, shape = treat)) +\n  geom_point(aes(time, y)) +\n  geom_line() +\n  facet_wrap(~ model) +\n coord_cartesian(ylim = c(0, 1)) + # set the max to 0.6\n  labs(\n    y = \"Disease incidence\",\n    x = \"Time (days after emergence)\"\n  )\n\n\n\n\nOverall, the logistic model seems a better fit for all the curves. Let’s produce a plot with the prediction error versus time.\n\n\nepi_all$Data %>%\n filter(model %in% c(\"Gompertz\", \"Logistic\")) %>% \n  ggplot(aes(time, predicted -y, shape = treat)) +\n  geom_point() +\n  geom_line() +\n  geom_hline(yintercept = 0, linetype =2)+\n  facet_wrap(~ model) +\n coord_cartesian(ylim = c(-0.4, 0.4)) + # set the max to 0.6\n  labs(\n    y = \"Prediction error\",\n    x = \"Time (days after emergence)\"\n  )\n\n\n\n\nThe plots above confirms the logistic model as good fit overall because the errors for all epidemics combined are more scattered around the non-error line.\n\n\n  epi_all$Parameters %>%\n    filter(model == \"Logistic\") %>%\n    select(treat, y0, y0_ci_lwr, y0_ci_upr, r, r_ci_lwr, r_ci_upr \n)\n\n\n  treat       y0 y0_ci_lwr y0_ci_upr     r r_ci_lwr r_ci_upr\n1     1 0.093504  0.027321   0.27473 0.210    0.166    0.255\n2     2 0.001373  0.000672   0.00280 0.278    0.254    0.303\n3     3 0.000813  0.000313   0.00211 0.175    0.143    0.208\n\nWe can produce a plot for visual inference on the differences in the parameters.\n\n\np1 <- epi_all$Parameters %>%\n  filter(model == \"Logistic\") %>%\n  ggplot(aes(treat, r)) +\n  geom_point(size = 3) +\n  geom_errorbar(aes(ymin = r_ci_lwr, ymax = r_ci_upr),\n    width = 0,\n    size = 1\n  ) +\n  labs(\n    x = \"Time\",\n    y = \"r\"\n  )\n\np2 <- epi_all$Parameters %>%\n  filter(model == \"Logistic\") %>%\n  ggplot(aes(treat, 1 - exp(-y0))) +\n  geom_point(size = 3) +\n  geom_errorbar(aes(ymin = y0_ci_lwr, ymax = y0_ci_upr),\n    width = 0,\n    size = 1\n  ) +\n  labs(\n    x = \"Time\",\n    y = \"y0\"\n  )\n\np1 | p2\n\n\n\n\n\nDesigned experiments\nIn this next exercise, we will work with disease data collected over time in the same plot unit (also called repeated measures) from a designed experiment for evaluating and comparing treatment effects.\nAgain, we will use a dataset of progress curves shown in page 98 of the Study of Plant Disease Epidemics book (Madden et al. 2007). The curves represent the incidence of soybean plants symptomatic for bud blight caused by tobacco streak virus. Four treatments (different planting dates) were evaluated in randomized complete block design with four replicates. There are four assessment in time for each curve. The data was stored as a csv file and will be loaded using read_csv() function and stored as dataframe called budblight.\nLoading data\n\n\nbudblight <- read_csv(\"data/bud-blight-soybean.csv\")\n\n\n\nLet’s have a look at the first six rows of the dataset and check the data type for each column. There is an additional column representing the replicates, called block.\n\n\nhead(budblight)\n\n\n# A tibble: 6 x 4\n  treat  time block     y\n  <chr> <dbl> <dbl> <dbl>\n1 PD1      30     1  0.1 \n2 PD1      30     2  0.3 \n3 PD1      30     3  0.1 \n4 PD1      30     4  0.1 \n5 PD1      40     1  0.3 \n6 PD1      40     2  0.38\n\nVisualizing the DPCs\nLet’s have a look at the curves and produce a combo plot figure similar to Fig. 4.17 of the book, but without the line of the predicted values.\n\n\np3 <- budblight %>%\n  ggplot(aes(\n    time, y,\n    group = block,\n    shape = factor(block)\n  )) +\n  geom_point(size = 1.5) +\n  ylim(0, 0.6) +\n  theme(legend.position = \"none\")+\n  facet_wrap(~treat, ncol =1)+\n  labs(y = \"Disease incidence\",\n       x = \"Time (days after emergence)\")\n\n\n\n\n\np4 <- budblight %>%\n  ggplot(aes(\n    time, log(1 / (1 - y)),\n    group = block,\n    shape = factor(block)\n  )) +\n  geom_point(size = 2) +\n  facet_wrap(~treat, ncol = 1) +\n  theme(legend.position = \"none\")+\n  labs(y = \"Transformed incidence\", x = \"Time (days after emergence)\")\n\np3 | p4\n\n\n\n\nModel fitting\nRemember that the first step in model selection is the visual appraisal of the curve data linearized with the model transformation. In the case the curves represent complete epidemics (close to 100%) appraisal of the absolute rate (difference in y between two times) over time is also helpful.\nFor the treatments above, it looks like the curves are typical of a monocyclic disease (the case of soybean bud blight), for which the monomolecular is usually a good fit, but other models are also possible as well. For this exercise, we will use both the linear and the nonlinear estimation method.\nLinear regression\nFor convenience, we use the fit_multi() to handle multiple epidemics. The function returns a list object where a series of statistics are provided to aid in model selection and parameter estimation. We need to provide the names of columns (arguments): assessment time (time_col), disease incidence (intensity_col), and treatment (strata_cols).\n\n\nlin1 <- fit_multi(\n  time_col = \"time\",\n  intensity_col = \"y\",\n  data = budblight,\n  strata_cols = \"treat\",\n  nlin = FALSE\n)\n\n\n\nLet’s look at how well the four models fitted the data. Epifitter suggests the best fitted model (1 to 4, where 1 is best) for each treatment. Let’s have a look at the statistics of model fitting.\n\n\n  lin1$Parameters %>% \n    select(treat, best_model, model, CCC, RSE)\n\n\n   treat best_model         model   CCC    RSE\n1    PD1          1 Monomolecular 0.935 0.0981\n2    PD1          2      Gompertz 0.904 0.2223\n3    PD1          3      Logistic 0.871 0.4475\n4    PD1          4   Exponential 0.828 0.3612\n5    PD2          1 Monomolecular 0.955 0.0700\n6    PD2          2      Gompertz 0.931 0.1794\n7    PD2          3      Logistic 0.906 0.3877\n8    PD2          4   Exponential 0.880 0.3268\n9    PD3          1 Monomolecular 0.939 0.0683\n10   PD3          2      Gompertz 0.929 0.1716\n11   PD3          3      Logistic 0.909 0.3905\n12   PD3          4   Exponential 0.890 0.3388\n13   PD4          1      Gompertz 0.923 0.1747\n14   PD4          2 Monomolecular 0.895 0.0649\n15   PD4          3      Logistic 0.891 0.5241\n16   PD4          4   Exponential 0.874 0.4977\n\nAnd now we extract values for each parameter estimated from the fit of the monomolecular model.\n\n\n  lin1$Parameters %>%\n  filter(model == \"Monomolecular\") %>%\n  select(treat, y0, r)\n\n\n  treat     y0      r\n1   PD1 -0.573 0.0220\n2   PD2 -0.522 0.0190\n3   PD3 -0.449 0.0159\n4   PD4 -0.362 0.0112\n\n\nNow we visualize the fit of the monomolecular model (using filter function - see below) to the data together with the observed data and then reproduce the right plots in Fig. 4.17 from the book.\n\n\nlin1$Data %>%\n  filter(model == \"Monomolecular\") %>%\n  ggplot(aes(time, predicted)) +\n  geom_point(aes(time, y)) +\n  geom_line(size = 0.5) +\n  facet_wrap(~treat) +\n  coord_cartesian(ylim = c(0, 0.6)) + # set the max to 0.6\n  labs(\n    y = \"Disease incidence\",\n    x = \"Time (days after emergence)\"\n  )\n\n\n\n\nNow we can plot the means and respective 95% confidence interval of the apparent infection rate (\\(r\\)) and initial inoculum (\\(y_0\\)) for visual inference.\n\n\np5 <- lin1$Parameters %>%\n  filter(model == \"Monomolecular\") %>%\n  ggplot(aes(treat, r)) +\n  geom_point(size = 3) +\n  geom_errorbar(aes(ymin = r_ci_lwr, ymax = r_ci_upr),\n    width = 0,\n    size = 1\n  ) +\n  labs(\n    x = \"Time\",\n    y = \"r\"\n  )\n\np6 <- lin1$Parameters %>%\n  filter(model == \"Monomolecular\") %>%\n  ggplot(aes(treat, 1 - exp(-y0))) +\n  geom_point(size = 3) +\n  geom_errorbar(aes(ymin = y0_ci_lwr, ymax = y0_ci_upr),\n    width = 0,\n    size = 1\n  ) +\n  labs(\n    x = \"Time\",\n    y = \"y0\"\n  )\n\np5 | p2\n\n\n\n\nNon-linear regression\nTo estimate the parameters using the non-linear approach, we repeat the same arguments in the fit_multi function, but include an additional argument nlin set to TRUE.\n\n\nnlin1 <- fit_multi(\n  time_col = \"time\",\n  intensity_col = \"y\",\n  data = budblight,\n  strata_cols = \"treat\",\n  nlin = TRUE\n)\n\n\n\nLet’s check statistics of model fit.\n\n\nnlin1$Parameters %>%\n  select(treat, model, CCC, RSE, best_model)\n\n\n   treat         model   CCC    RSE best_model\n1    PD1 Monomolecular 0.938 0.0613          1\n2    PD1      Gompertz 0.917 0.0699          2\n3    PD1      Logistic 0.896 0.0770          3\n4    PD1   Exponential 0.854 0.0880          4\n5    PD2 Monomolecular 0.967 0.0421          1\n6    PD2      Gompertz 0.935 0.0573          2\n7    PD2      Logistic 0.908 0.0666          3\n8    PD2   Exponential 0.870 0.0767          4\n9    PD3 Monomolecular 0.957 0.0427          1\n10   PD3      Gompertz 0.926 0.0544          2\n11   PD3      Logistic 0.900 0.0620          3\n12   PD3   Exponential 0.870 0.0689          4\n13   PD4 Monomolecular 0.918 0.0460          1\n14   PD4      Gompertz 0.909 0.0479          2\n15   PD4      Logistic 0.894 0.0508          3\n16   PD4   Exponential 0.884 0.0527          4\n\nAnd now we obtain the two parameters of interest. Note that the values are not the sames as those estimated using linear regression, but they are similar and highly correlated.\n\n\n  nlin1$Parameters %>%\n    filter(model == \"Monomolecular\") %>%\n    select(treat, y0, r)\n\n\n  treat     y0      r\n1   PD1 -0.707 0.0238\n2   PD2 -0.634 0.0206\n3   PD3 -0.505 0.0167\n4   PD4 -0.350 0.0109\n\n\n\np7 <- nlin1$Parameters %>%\n  filter(model == \"Monomolecular\") %>%\n  ggplot(aes(treat, r)) +\n  geom_point(size = 3) +\n  geom_errorbar(aes(ymin = r_ci_lwr, ymax = r_ci_upr),\n    width = 0,\n    size = 1\n  ) +\n  labs(\n    x = \"Time\",\n    y = \"r\"\n  )\n\np8 <- nlin1$Parameters %>%\n  filter(model == \"Monomolecular\") %>%\n  ggplot(aes(treat, y0)) +\n  geom_point(size = 3) +\n  geom_errorbar(aes(ymin = y0_ci_lwr, ymax = y0_ci_upr),\n    width = 0,\n    size = 1\n  ) +\n  labs(\n    x = \"Time\",\n    y = \"y0\"\n  )\n\np7 | p8\n\n\n\n\n\n\n\n",
      "last_modified": "2020-12-09T09:32:17-03:00"
    },
    {
      "path": "time-population-level-calculations.html",
      "title": "Population level models",
      "description": "Fitting and choosing the best fitted model to disease progress curve data obtained in replicated experiments.",
      "author": [],
      "contents": "\n\nContents\nIntroduction\nCálculos com modelos\nCalcula y\nCalcula y0\nCalcula tempo para y\nr entre dois tempos\n\n\n\nIntroduction\nCálculos com modelos\nA formulação linear dos modelos de progresso de doença podem ser utilizados para predizer a intensidade da doença em qualquer tempo, determinar o valor dao parâmetro de taxa e avaliar o efeito da mudança da intensidade inicial da doença e o parâmetro de taxa no desenvolvimento da doença. O modelo linearizado mostrado anteriormente consiste de quatro termos:\na transformação da intensidade inicial da doença\na taxa de aumento (slope)\num período de tempo além do tempo inicial (t)\na transformação da intensidade da doença em um determinado período de tempo (y*)\nNos cálculos abaixo, três dos quatro termos são conhecidos e deve-se solucionar o quarto termo.\nCalcula y\nConsidere: Modelo exponencial com taxa rE = 0.1\n\n[1] -3.61\n[1] 0.0272\n\nCalcula y0\nNo tempo de 35 dias, a intensidade é 0.16 (y35 = 0.16) e a taxa é 0.15/dia. Considere o modelo logístico.\n\n[1] -6.91\n[1] 0.000999\n\n\nCalcula tempo para y\nOutra possibilidade de cálculo é o de quanto tempo leva para atingir um determinado valor yt2, sabendo o valor de yt1 em um tempo t1 anterior conhecido.\n\n[1] 16.1\n[1] 26.1\n\nNo gráfico abaixo, a linha tracejada indica o t1 e t2, ou o tempo após o início da epidemia, estimado em 26 dias, segundo calculado acima.\n\n\n\nr entre dois tempos\nUma outra possibilidade de cálculo é o da taxa do modelo conhecendo-se o valor de y em dois tempos: yt1 e yt2. O rearranjo da equação que permite calcular rE é dado por:\n\n\\(r_E\\) =\\(\\dfrac{ln(y_{t_2}) - ln(y_{t_1})}{t_2 - t_1}\\),\nrE = (log(yt2) - log(yt1))/(t2-t1) ,\n\n\nOnde, yt2 e yt1 são a intensidade da doença nos dois tempos t2 e t1, respectivamente.\n\n\n\n[1] 0.0805\n\n\n\n\n",
      "last_modified": "2020-12-09T09:32:19-03:00"
    },
    {
      "path": "time-population-level-fitting.html",
      "title": "Population level models",
      "description": "Fitting and choosing the best fitted model to disease progress curve data obtained in replicated experiments.",
      "author": [],
      "contents": "\n\nContents\nApresentação\nConjunto de dados\nCálculo da taxa absoluta\nLinearizações de y*\nAjuste por regressão linear\nAvalia o R*2\nEstima y\n\nRegressão não linear\nLogístico\nGompertz\nMonomolecular\n\n\n\nApresentação\nNeste tutorial será demonstrada a escolha de um modelo específico para os dados de progresso de doença com base em procedimentos gráficos e estatísticos. Os dados são os mesmos apresentados em Madden et al. (2007, pág. 85) do progresso de um vírus do tabaco. Os procedimentos seguem aqueles também apresentados no livro (Madden et al., 2007).\nConjunto de dados\nOs dados abaixo representam os dados de incidência observados em intervalos de sete dias, para o progresso do vírus do tabaco, avaliados até 49 dias após o início da epidemia.\n\n\n\nAbaixo, o programa para gerar o gráfico da curva de progresso da incidência no tempo\n\n\n\nCálculo da taxa absoluta\nA taxa absoluta é a diferença de y entre dois tempos da epidemia, que é dada por:\ndy/dt = (y2 - y1) / (t2 - t1)\nNo cálculo abaixo, uma vez que os intervalos são fixos em 7 dias, foi criada uma variável dydt apenas com a subtração entre um tempo t e o tempo anterior.\n\n[1] 0.00000 0.00129 0.01143 0.02286 0.07857 0.02571 0.00143\n\nPara produzir um gráfico da taxa absoluta no tempo, o tempo é na verdade a média entre dois tempois. De maneira simples, pode-se calcular o tempo médio entre dois tempos. Abaixo, o tempo médio é atribuído à variável t2.\n\n[1]  0.0  3.5 10.5 17.5 24.5 31.5 38.5\n\nAssim como para o tempo, se calcula a média de incidência entre duas avaliações, atribuída a variável y2.\n\n[1] 0.0000 0.0055 0.0500 0.1700 0.5250 0.8900 0.9850\n\nA seguir, as duas curvas podem ser plotadas\n\n\n\nLinearizações de y*\nA análise gráfica envolve a visualização de y* (y linearizado) no tempo. Para tal, aplica-se as transformações que linearizam para cada um dos modelos. No exemplo, serão feitas linearizações para cinco modelos.\n\n   t     y    yexp   ymon  ylog   ygom   yric3\n1  0 0.001 -6.9078 0.0010 -6.91 -1.933 -13.816\n2  7 0.010 -4.6052 0.0101 -4.60 -1.527  -9.210\n3 14 0.090 -2.4079 0.0943 -2.31 -0.879  -4.808\n4 21 0.250 -1.3863 0.2877 -1.10 -0.327  -2.708\n5 28 0.800 -0.2231 1.6094  1.39  1.500   0.575\n6 35 0.980 -0.0202 3.9120  3.89  3.902   3.189\n7 42 0.990 -0.0101 4.6052  4.60  4.600   3.897\n8 49 0.999 -0.0010 6.9078  6.91  6.907   6.213\n\nAnálise gráfica das transformações. A curva que for mais “reta” indica o possível modelo que melhor se ajusta aos dados.\n\n\n\nAjuste por regressão linear\nAqui o ajuste ao modelo linear será com os dados transformados de y (y*) , para cada um dos modelos que supostamente tem melhor ajuste, no tempo. Abaixo a regressão linear para o logito versus tempo e gompito versus tempo, já que a curva é sigmóide e a análise visual indica que esses dois modelos parecem descrever adequadamente a epidemia.\n\n(Intercept)           t \n     -6.590       0.278 \n             2.5 % 97.5 %\n(Intercept) -7.304 -5.875\nt            0.254  0.303\n[1] 0.000672\n(Intercept)           t \n     -2.998       0.185 \n             2.5 % 97.5 %\n(Intercept) -4.326  -1.67\nt            0.139   0.23\n[1] 0.013\n\nAbaixo, os gráficos da regresão linear para cada modelo\n\n\n\nAbaixo, os gráficos dos resíduos\n\n\n\nAvalia o R*2\nAvalia o ajuste dos modelos com base no R2 ajustado da relação linear entre o log(y) versus o predito pelo modelo linear.\n\n   t     y   yexp  ymon  ylog   ygom   yric3 pred_logito\n1  0 0.001 -6.908 0.001 -6.91 -1.933 -13.816      -6.590\n2  7 0.010 -4.605 0.010 -4.59 -1.527  -9.210      -4.644\n3 14 0.090 -2.408 0.094 -2.31 -0.879  -4.808      -2.698\n4 21 0.250 -1.386 0.288 -1.10 -0.327  -2.708      -0.752\n5 28 0.800 -0.223 1.609  1.39  1.500   0.575       1.194\n6 35 0.980 -0.020 3.912  3.89  3.902   3.189       3.140\n7 42 0.990 -0.010 4.605  4.59  4.600   3.897       5.086\n8 49 0.999 -0.001 6.908  6.91  6.907   6.213       7.032\n[1] 0.992\n            Estimate Std. Error t value Pr(>|t|)\n(Intercept)   0.0117     0.1602  0.0733 9.44e-01\npred_logito   1.0018     0.0359 27.9240 1.40e-07\n[1] 0.154\n[1] 0.392\n\n   t     y   yexp  ymon  ylog   ygom   yric3 pred_logito pred_gompito\n1  0 0.001 -6.908 0.001 -6.91 -1.933 -13.816      -6.590       -2.998\n2  7 0.010 -4.605 0.010 -4.59 -1.527  -9.210      -4.644       -1.703\n3 14 0.090 -2.408 0.094 -2.31 -0.879  -4.808      -2.698       -0.408\n4 21 0.250 -1.386 0.288 -1.10 -0.327  -2.708      -0.752        0.887\n5 28 0.800 -0.223 1.609  1.39  1.500   0.575       1.194        2.182\n6 35 0.980 -0.020 3.912  3.89  3.902   3.189       3.140        3.477\n7 42 0.990 -0.010 4.605  4.59  4.600   3.897       5.086        4.772\n8 49 0.999 -0.001 6.908  6.91  6.907   6.213       7.032        6.067\n[1] 0.943\n             Estimate Std. Error  t value Pr(>|t|)\n(Intercept)  -0.00278      0.335 -0.00832 9.94e-01\npred_gompito  0.99913      0.100  9.97302 5.88e-05\n[1] 0.728\n\n\nEstima y\n\n(Intercept)           t \n     -6.590       0.278 \n(Intercept) \n    0.00137 \n(Intercept)           t \n     -2.998       0.185 \n(Intercept) \n   1.97e-09 \n\n\nRegressão não linear\nExistem alguns modelos complexos que não podem ser linearizados ou que mesmo que seja possível, os parâmetros podem ser estimados por métodos não lineares. Nesse caso, o processo de ajuste não linear no R é similar ao ajuste de modelos lineares, exceto pelo fato de que não há uma fórmula explícita para estimação, então procedimentos iterativos são necessários, exigindo que o usuário entre com estimativas iniciais dos parâmetros.\nLogístico\nNo R, os modelo não lineares são ajustados com a função nls. Abaixo um exemplo de ajuste do modelo logístico. Note que os parâmetros iniciais de k, y0 e r precisam ser informados para dar início ao processo de estimação. O k equivale à intensidade máxima de doença e no exemplo abaixo é estimado ao invés de considerar o máximo com o valor 1, no caso de epidemias completas. Em muitos casos as epidemias não chegam ao máximo e portanto k precisa ser informado para que não ocorre erro na estimativa dos outros dois parâmetros.\n\n       k       y0        r \n1.000799 0.000348 0.331519 \n     k     y0      r \n1.0008 0.0003 0.3315 \n\nFormula: y ~ k/(1 + (k/y0 - 1) * exp(-r * t))\n\nParameters:\n   Estimate Std. Error t value Pr(>|t|)    \nk  1.000799   0.017159   58.33  2.8e-08 ***\ny0 0.000348   0.000245    1.42   0.2152    \nr  0.331519   0.029830   11.11   0.0001 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.027 on 5 degrees of freedom\n\nNumber of iterations to convergence: 7 \nAchieved convergence tolerance: 2.3e-06\n\n\nCall:\nlm(formula = y ~ predict(nl_logistico))\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-0.02873 -0.00909 -0.00324  0.00673  0.04156 \n\nCoefficients:\n                      Estimate Std. Error t value Pr(>|t|)    \n(Intercept)             0.0141     0.0119    1.19     0.28    \npredict(nl_logistico)   0.9842     0.0177   55.69  2.3e-09 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.0222 on 6 degrees of freedom\nMultiple R-squared:  0.998, Adjusted R-squared:  0.998 \nF-statistic: 3.1e+03 on 1 and 6 DF,  p-value: 2.25e-09\n\nGompertz\nNo modelo de Gompertz, iremos utilizar a mesma função. No entanto, algumas vezes a função nls tem problemas para convergir a partir dos dados iniciais atriuídos para inicializar o modelo. No exemplo abaixo será utilizada função nlsLM do pacote minpack.lm\n\n       k       y0        r \n1.05e+00 5.25e-20 1.72e-01 \n\n\nCall:\nlm(formula = predict(nl_gompertz) ~ y)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-0.06424 -0.04123  0.00621  0.03288  0.07374 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)  -0.0117     0.0293    -0.4      0.7    \ny             1.0061     0.0434    23.2  4.2e-07 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.0536 on 6 degrees of freedom\nMultiple R-squared:  0.989, Adjusted R-squared:  0.987 \nF-statistic:  537 on 1 and 6 DF,  p-value: 4.22e-07\n\nMonomolecular\n\n    y0      r \n0.0266 0.0408 \n\nFormula: ym2 ~ 1 - (1 - y0) * exp(-r * tm2)\n\nParameters:\n   Estimate Std. Error t value Pr(>|t|)    \ny0  0.02663    0.01535    1.73     0.11    \nr   0.04083    0.00139   29.46  4.7e-11 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.0187 on 10 degrees of freedom\n\nNumber of iterations to convergence: 7 \nAchieved convergence tolerance: 1.49e-08\n\n\n\n\n```{.r .distill-force-highlighting-css}\n\n\n",
      "last_modified": "2020-12-09T09:32:24-03:00"
    },
    {
      "path": "time-population-level-models.html",
      "title": "Population dynamics models",
      "description": "Models that summarizes the progress of the epidemics at the population levels",
      "author": [],
      "contents": "\n\nContents\nIntroduction\nModels\nExponential\nMonomolecular\nLogistic\nGompertz\n\n\n\nIntroduction\nThe family of models that describe the plant epidemic growth, hence population dynamics model, are known as deterministic models of continuous time. These models usually provide a good fit to disease progress curve data. By convention, time is represented by \\(t\\) , disease intensity is represented by \\(y\\) and the (absolute) rate of change between two time units is represented by \\(\\frac{dy}{dt}\\) which depends on \\(y\\) and the apparent infection rate, or \\(r\\), which summarizes the effect of host, pathogen and environment on the “infection chain”.\nIn this tutorial, I will use R to describe the models and create data and simulate the curves so let’s firt load essential packages and set some initial parameters for the simulations\n\n\nlibrary(tidyverse)\nlibrary(ggthemes)\nlibrary(patchwork)\ntheme_set(theme_light())\n\n\n\n\n\ny0 <- 0.001 # initial inoculum curve 1\nr <- 0.06 # rate curve 1\ntmax <- 60 # maximum duration t of the epidemics\ndat <- data.frame(t = seq(1:tmax), y = seq(0:1))\n\n\n\nModels\nExponential\nThe differential of the exponential model is given by\n\\(\\frac{dy}{dt} = r_E.y\\)\nwhere \\(\\frac{dy}{dt}\\) is the rate (subscript E for this model) and \\(y\\) is the disease intensity. Biologically, diseased plants \\(y\\) at each time contribute to the increase of the disease over time \\(t\\). The value of the \\(\\frac{dy}{dt}\\) is minimum when \\(y = 0\\) and increases with the increase in \\(y\\).\n\n\ndat %>%\n  ggplot(aes(t, y)) +\n  stat_function(fun = function(t) y0 * exp(r * t)) +\n  labs(\n    y = \"dy/dt\",\n    x = \"Time\"\n  )\n\n\n\n\nThe integral is given by \\(y = y_0 e^{r_Et}\\). Let’s use R to simulate a few curves by varying the \\(r\\) and \\(y0\\).\n\n\np1 <- dat %>%\n  ggplot(aes(t, y)) +\n  stat_function(fun = function(t) y0 * exp(r * t), linetype = 1) +\n  stat_function(fun = function(t) y0 * exp(r * 2 * t), linetype = 2) +\n  ylim(0, 1) +\n  labs(\n    title = \"2 times r same y0\",\n    x = \"Time\"\n  )\n\n\np2 <- dat %>%\n  ggplot(aes(t, y)) +\n  stat_function(fun = function(t) y0 * exp(r * 2 * t), linetype = 1) +\n  stat_function(fun = function(t) y0 * 5 * exp(r * 2 * t), linetype = 2) +\n  ylim(0, 1) +\n  labs(title = \"5 times y0 same r\", x = \"Time\")\n\np1 | p2\n\n\n\n\nMonomolecular\nThe differential of the monomolecular model is given by\n\\(\\frac{dy}{dt} = r_M (1-y)\\)\nwhere \\(\\frac{y}{dt}\\) is the absolute rate, \\(r_M\\) is the rate parameter of the monomolecular model and \\((1-y)\\) is the proportion of non-infected (healthy) individuals or host tissue. The value of the \\(\\frac{dy}{dt}\\) is maximum when \\(y = 0\\) and decreases when \\(y\\) approaches 1. Its decline is due to decrease in the proportion of individuals or healthy sites with the increase in \\(y\\). Any inoculum capable of infecting the host will more likely land on infected individuals or sites. Here is the curve of the absolute rate for the monomolecular model over time.\n\n\ndat %>%\n  ggplot(aes(t, y)) +\n  stat_function(fun = function(t) y0 * exp(-r * t)) +\n  labs(y = \"dy/dt\", x = \"Time\")\n\n\n\n\nThe integral of the model usually describes the temporal patterns of the monocyclic epidemics for which the inoculum produced during the course of the epidemics do not contribute new infections .Therefore, different from the exponential model, disease intensity \\(y\\) do not affect the epidemics and so the absolute rate is proportional to \\((1-y)\\).\nThe integral of the monomolecular model is given by\n\\(\\frac{dy}{dt} = 1 - (1-y)e^{-r_Mt}\\)\nLet’s simulate two monomolecular curves with different rate parameters.\n\n\n\nLogistic\nThe logistic model is more elaborated than the two previous models as it incorporates the features of them both. Its differential is given by\n\\(\\frac{dy}{dt} = ,r_L. y . (1 - y)\\)\nwhere \\(r_L\\) is the apparent infection rate of the logistic model, \\(y\\) is the proportion of diseased individuals or host tissue and \\((1-y)\\) is the proportion of non-affected individuals or host area. Biologically, \\(y\\) in its differential equation implies that \\(\\frac{dy}{dt}\\) increases with the increase in \\(y\\) (as in the exponential) because more disease leads to more inoculum. However, \\((1-y)\\) leads to a decrease in \\(\\frac{dy}{dt}\\) when \\(y\\) approaches the maximum \\(y=1\\), because the proportion of healthy individuals or host area decreases (as in the monomolecular). Therefore, \\(\\frac{dy}{dt}\\) is minimal at the onset of the epidemics, reaches a maximum when \\(y/2\\) and declines until \\(y=1\\).\nThe integral is given by\n\\(y = \\frac{1}{1 + (1-y_0).e^{-r.t}}\\),\nwhere \\(r_L\\) is the apparent infection rate of the logistic model and \\(y0\\) is the disease intensity at \\(t=0\\).\n\n\n\nGompertz\nGompertz model is similar to the logistic and provides a very good fit to several polycyclic diseases. The differential equation is given by\n\\(\\frac{dy}{dt} = r_G.[ln(1) - ln(y)]\\)\nDifferently from the logistic, the variable representing the non-infected individuals or host area is \\(-ln(y)\\). The integral equation is given by\n\\(y = e^{(ln(y0)).{e^{-r_G.t)}}}\\)\nWhere \\(r_G\\) is the apparent infection rate for the Gompertz models and \\(y_0\\) is the disease intensity at \\(t = 0\\)\n\n\n\n\n\n\n",
      "last_modified": "2020-12-09T09:32:31-03:00"
    }
  ],
  "collections": []
}
