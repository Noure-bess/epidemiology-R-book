{
  "hash": "2f9c0dc4d64560eca77909bd80ad6250",
  "result": {
    "markdown": "---\ntitle: \"Ordinal scales\"\neditor_options: \n  chunk_output_type: inline\n---\n\n\n::: {.callout-note appearance=\"simple\"}\nThis is a work in progress that is currently undergoing heavy technical editing and copy-editing\n:::\n\n## Ordinal scales\n\nThe ordinal scales are structured as rank-ordered numeric classes in a finite number of classes. The reasons for using ordinal scales include convenience and speed of rating [@madden2017]. There are two common types of ordinal scales in plant pathological research: quantitative and qualitative [@Chiang2022].\n\n### Quantitative ordinal\n\nIn the quantitative ordinal scale, each score represents a defined interval of the percentage scale. The most well-known quantitative ordinal scale is the Horsfall-Barratt (HB) scale, developed in the early 1940s when the science of plant pathology was in need of more quantitative approaches [@hebert1982]. The HB scale splits the percent scale into twelve consecutive logarithmic-based intervals of severity from 0 to 100%. The intervals increase in size from 0 to 50% and decline from 50 to 100%.\n\n::: callout-warning\n## Controversy of the H-B scale\n\nThe divisions of the H-B scale were based on two assumptions. First, on the logarithmic relationship between the intensity of a stimulus and sensation. Second, that the rater tends to focus on objects that are of smaller size when observing objects of two colors [@madden2017]. The basis is the so-called Weber-Fechner law. There is little experimental evidence of the assumptions. To date, evidence shows a linear relationship, not a logarithmic, between visually estimated and actual severity [@nutter2006a]. Also, those authors showed that raters more accurately discriminated disease severity between 25% and 50% compared to what the H-B scale allowed. New scale structure have been proposed to overcome the issues associated with the H-B scale [@liu2019; @chiang2014]. The Chiang scale follows a linear relationship with percentage area diseased at severities \\>10% (class 6 on the scale)\n:::\n\nLet's input the HB scale data and store as a data frame in R so we can prepare a table and a plot.\n\n\n::: {#tbl-HB .cell tbl-cap='The Horsfal-Barrat quantitative ordinal scale used as a tool for assessing plant disease severity ' hash='data-ordinal_cache/html/tbl-HB_d05d59b4bd2f38b43045feebff2decd4'}\n\n```{.r .cell-code}\nHB <- tibble::tribble(\n  ~ordinal, ~'range', ~midpoint,\n  0,          '0',    0,   \n  1,    '0+ to 3',  1.5,   \n  2,    '3+ to 6',  4.5,   \n  3,   '6+ to 12',  9.0,  \n  4,  '12+ to 25', 18.5, \n  5,  '25+ to 50', 37.5, \n  6,  '50+ to 75', 62.5, \n  7,  '75+ to 88', 81.5, \n  8,  '88+ to 94', 91.0, \n  9,  '94+ to 97', 95.5, \n  10,'97+ to 100', 98.5,  \n  11,      '100',   100 \n  )\nknitr::kable(HB, align = \"c\")\n```\n\n::: {.cell-output-display}\n| ordinal |   range    | midpoint |\n|:-------:|:----------:|:--------:|\n|    0    |     0      |   0.0    |\n|    1    |  0+ to 3   |   1.5    |\n|    2    |  3+ to 6   |   4.5    |\n|    3    |  6+ to 12  |   9.0    |\n|    4    | 12+ to 25  |   18.5   |\n|    5    | 25+ to 50  |   37.5   |\n|    6    | 50+ to 75  |   62.5   |\n|    7    | 75+ to 88  |   81.5   |\n|    8    | 88+ to 94  |   91.0   |\n|    9    | 94+ to 97  |   95.5   |\n|   10    | 97+ to 100 |   98.5   |\n|   11    |    100     |  100.0   |\n:::\n:::\n\n\nLet's visualize the different sizes of the percent interval encompassing each score.\n\n\n::: {.cell hash='data-ordinal_cache/html/fig-hb_5c821cf5d5a10d9f536fe7c51a6b2cdd'}\n\n```{.r .cell-code  code-fold=\"true\"}\nlibrary(tidyverse)\ntheme_set(theme_bw())\nHB |> \n  ggplot(aes(midpoint, ordinal))+\n  geom_point(size =2)+\n  geom_line()+\n  scale_x_continuous(breaks = c(0, 3, 6, 12, 25, 50, 75, 88, 94, 97))+\n  scale_y_continuous(breaks = c(1:12))+\n  geom_vline(aes(xintercept = 3), linetype = 2)+\n  geom_vline(aes(xintercept = 6), linetype = 2)+\n  geom_vline(aes(xintercept = 12), linetype = 2)+\n  geom_vline(aes(xintercept = 25), linetype = 2)+\n  geom_vline(aes(xintercept = 50), linetype = 2)+\n  geom_vline(aes(xintercept = 75), linetype = 2)+\n  geom_vline(aes(xintercept = 88), linetype = 2)+\n  geom_vline(aes(xintercept = 94), linetype = 2)+\n  geom_vline(aes(xintercept = 97), linetype = 2)+\n  labs(x = \"Percent severity\", y = \"HB score\")\n```\n\n::: {.cell-output-display}\n![Ordinal scores of the Horsfal-Barrat scale](data-ordinal_files/figure-html/fig-hb-1.png){#fig-hb width=672}\n:::\n:::\n\n\nWe can repeat those procedures to visualize the Chiang scale.\n\n\n::: {#tbl-chiang .cell tbl-cap='The Chiang quantitative ordinal scale used as a tool for assessing plant disease severity ' hash='data-ordinal_cache/html/tbl-chiang_0d9d0164443582995c13480e6c5c75b3'}\n\n```{.r .cell-code}\nchiang <- tibble::tribble(\n  ~ordinal, ~'range', ~midpoint,\n  0,          '0',     0,   \n  1,  '0+ to 0.1',  0.05,   \n  2,'0.1+ to 0.5',   0.3,   \n  3,  '0.5+ to 1',  0.75,  \n  4,    '1+ to 2',   1.5, \n  5,    '2+ to 5',     3, \n  6,   '5+ to 10',   7.5, \n  7,  '10+ to 20',    15, \n  8,  '20+ to 30',    25, \n  9,  '30+ to 40',    35, \n  10, '40+ to 50',    45,  \n  11, '50+ to 60',    55,\n  12, '60+ to 70',    65,\n  13, '70+ to 80',    75,\n  14, '80+ to 90',    85,\n  15,'90+ to 100',   95\n  )\nknitr::kable(chiang, align = \"c\")\n```\n\n::: {.cell-output-display}\n| ordinal |    range    | midpoint |\n|:-------:|:-----------:|:--------:|\n|    0    |      0      |   0.00   |\n|    1    |  0+ to 0.1  |   0.05   |\n|    2    | 0.1+ to 0.5 |   0.30   |\n|    3    |  0.5+ to 1  |   0.75   |\n|    4    |   1+ to 2   |   1.50   |\n|    5    |   2+ to 5   |   3.00   |\n|    6    |  5+ to 10   |   7.50   |\n|    7    |  10+ to 20  |  15.00   |\n|    8    |  20+ to 30  |  25.00   |\n|    9    |  30+ to 40  |  35.00   |\n|   10    |  40+ to 50  |  45.00   |\n|   11    |  50+ to 60  |  55.00   |\n|   12    |  60+ to 70  |  65.00   |\n|   13    |  70+ to 80  |  75.00   |\n|   14    |  80+ to 90  |  85.00   |\n|   15    | 90+ to 100  |  95.00   |\n:::\n:::\n\n::: {.cell hash='data-ordinal_cache/html/fig-chiagn_7627ed43e24f17dfcb54f9e41041c946'}\n\n```{.r .cell-code  code-fold=\"true\"}\nlibrary(tidyverse)\ntheme_set(theme_bw())\nchiang |> \n  ggplot(aes(midpoint, ordinal))+\n  geom_point(size =2)+\n  geom_line()+\n  scale_y_continuous(breaks = c(0:15))+\n  scale_x_continuous(breaks = c(0, 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100))+\n  geom_vline(aes(xintercept = 0), linetype = 2)+\n  geom_vline(aes(xintercept = 0.1), linetype = 2)+\n  geom_vline(aes(xintercept = 0.5), linetype = 2)+\n  geom_vline(aes(xintercept = 1), linetype = 2)+\n  geom_vline(aes(xintercept = 2), linetype = 2)+\n  geom_vline(aes(xintercept = 5), linetype = 2)+\n  geom_vline(aes(xintercept = 10), linetype = 2)+\n  geom_vline(aes(xintercept = 20), linetype = 2)+\n  geom_vline(aes(xintercept = 30), linetype = 2)+\n   geom_vline(aes(xintercept = 40), linetype = 2)+\n   geom_vline(aes(xintercept = 50), linetype = 2)+\n   geom_vline(aes(xintercept = 60), linetype = 2)+\n   geom_vline(aes(xintercept = 70), linetype = 2)+\n   geom_vline(aes(xintercept = 80), linetype = 2)+\n   geom_vline(aes(xintercept = 90), linetype = 2)+\n   geom_vline(aes(xintercept = 100), linetype = 2)+\n  labs(x = \"Percent severity\", y = \"Chiang score\")\n```\n\n::: {.cell-output-display}\n![Ordinal scores of the Chiang scale](data-ordinal_files/figure-html/fig-chiagn-1.png){#fig-chiagn width=672}\n:::\n:::\n\n\n### Qualitative ordinal\n\nIn the qualitative ordinal scale, each class provides a description of the symptoms. An example is the ordinal 0-3 scale for rating eyespot of wheat developed by [@scott1974].\n\n| Class | Description                                                                                                 |\n|----------------------|--------------------------------------------------|\n| 0     | uninfected                                                                                                  |\n| 1     | slight eyespot (or or more small lesion occupying in total less than half of the circumference of the stem) |\n| 2     | moderate eyespot (one or more lesions occupying at least half the circumference of the stem)                |\n| 3     | severe eyespot (stem completely girdled by lesions; tissue softened so that lodging would really occur)     |\n\n: Ordinal scale for rating eyespot of wheat [@scott1974]\n\n## Disease severity index (DSI)\n\nUsually, when quantitative or qualitative ordinal scales are used, the scores are transformed into an index on a percentage basis, such as the disease severity index (DSI) which are used in data analysis. The DSI is a single number that summarizes a large amount of information on disease severity [@chester1950]. The formula for a DSI (%) can be written as follows:\n\n$DSI = \\frac{∑(class \\ freq. \\ ✕ \\ score \\  of \\ class)} {total \\ n \\ ✕ \\ maximal \\ class} ✕ 100$\n\nThe `DSI()` and `DSI2()` are part of the *r4pde* package. Let's see how each function works.\n\nThe `DSI()` allows to automate the calculation of the disease severity index (DSI) in a series of units (e.g. leaves) that are further classified according to ordinal scores. The function requires three arguments:\n\n-   unit = the vector of the number of each unit\n\n-   class = the vector of the scores for the units\n\n-   max = the maximum value of the scale\n\nLet's create a toy data set composed of 12 units where each received an ordinal score. The vectors were arranged as a data frame named scores.\n\n\n::: {.cell hash='data-ordinal_cache/html/unnamed-chunk-5_64f51ffa76877429555f4886fec34ad2'}\n\n```{.r .cell-code}\nunit <- c(1:12)\nclass <- c(2,3,1,1,3,4,5,0,2,5,2,1)\nratings <- data.frame(unit, class)\nknitr::kable(ratings)\n```\n\n::: {.cell-output-display}\n| unit| class|\n|----:|-----:|\n|    1|     2|\n|    2|     3|\n|    3|     1|\n|    4|     1|\n|    5|     3|\n|    6|     4|\n|    7|     5|\n|    8|     0|\n|    9|     2|\n|   10|     5|\n|   11|     2|\n|   12|     1|\n:::\n:::\n\n\nThe ordinal score used in this example has 6 as the maximum score. The function returns the DSI value.\n\n\n::: {.cell hash='data-ordinal_cache/html/unnamed-chunk-6_be60dbc588c685696f7fcff30337bf43'}\n\n```{.r .cell-code}\nlibrary(r4pde)\nDSI(ratings$unit, ratings$class, 6)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 40.27778\n```\n:::\n:::\n\n\nLet's work now with a situation of multiple plots (5 replicates) where a fixed number of 12 samples were taken and assessed using an ordinal score. Let's input the data using the `tribble()` function. Note that the data is in the wide format.\n\n\n::: {.cell hash='data-ordinal_cache/html/unnamed-chunk-7_df44ee2aa7648dc68b7041d0504e3a5b'}\n\n```{.r .cell-code}\nexp <- tibble::tribble(\n  ~rep, ~`1`, ~`2`, ~`3`, ~`4`, ~`5`, ~`6`, ~`7`, ~`8`, ~`9`, ~`10`, ~`11`,~`12`,\n  1, 2, 3, 1, 1, 3, 4, 5, 0, 2, 5, 2, 1,\n  2, 3, 4, 4, 6, 5, 4, 4, 0, 2, 1, 1, 5,\n  3, 5, 6, 6, 5, 4, 2, 0, 0, 0, 0, 2, 0,\n  4, 5, 6, 0, 0, 0, 3, 3, 2, 1, 0, 2, 3, \n  5, 0, 0, 0, 0, 2, 3, 2, 5, 6, 2, 1, 0,\n)\nknitr::kable(exp)\n```\n\n::: {.cell-output-display}\n| rep|  1|  2|  3|  4|  5|  6|  7|  8|  9| 10| 11| 12|\n|---:|--:|--:|--:|--:|--:|--:|--:|--:|--:|--:|--:|--:|\n|   1|  2|  3|  1|  1|  3|  4|  5|  0|  2|  5|  2|  1|\n|   2|  3|  4|  4|  6|  5|  4|  4|  0|  2|  1|  1|  5|\n|   3|  5|  6|  6|  5|  4|  2|  0|  0|  0|  0|  2|  0|\n|   4|  5|  6|  0|  0|  0|  3|  3|  2|  1|  0|  2|  3|\n|   5|  0|  0|  0|  0|  2|  3|  2|  5|  6|  2|  1|  0|\n:::\n:::\n\n\nAfter reshaping the data to the long format, we can calculate the DSI for each plot/replicate as follows:\n\n\n::: {.cell hash='data-ordinal_cache/html/unnamed-chunk-8_43179cda3bb85dd131e1ec55964dda15'}\n\n```{.r .cell-code}\nres <- exp |> \n  pivot_longer(2:13, names_to = \"unit\", values_to = \"class\") |>\n  group_by(rep) |> \n  summarise(DSI = DSI(unit, class, 6))\n```\n:::\n\n\nAnd here we have the results of the DSI for each replicate.\n\n\n::: {.cell hash='data-ordinal_cache/html/unnamed-chunk-9_137eb5964a9e2b79e07b709dd71bb631'}\n\n```{.r .cell-code}\nknitr::kable(res, align = \"c\")\n```\n\n::: {.cell-output-display}\n| rep |   DSI    |\n|:---:|:--------:|\n|  1  | 40.27778 |\n|  2  | 54.16667 |\n|  3  | 41.66667 |\n|  4  | 34.72222 |\n|  5  | 29.16667 |\n:::\n:::\n\n\nNow our data set is organized as the frequency of each class as follows:\n\n\n::: {.cell hash='data-ordinal_cache/html/unnamed-chunk-10_d5b8641baa40e12adb8e028ea6cb0803'}\n\n```{.r .cell-code}\nratings2 <- ratings |> \n  dplyr::count(class)\n\nratings2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  class n\n1     0 1\n2     1 3\n3     2 3\n4     3 2\n5     4 1\n6     5 2\n```\n:::\n:::\n\n\nNow we can apply the `DSI2()` function. The function requires three arguments:\n\n-   class = the number of the respective class\n-   freq = the frequency of the class\n-   max = the maximum value of the scale\n\n\n\n::: {.cell hash='data-ordinal_cache/html/unnamed-chunk-11_13f958b1d778f4e02b72de16b39d813f'}\n\n```{.r .cell-code}\nlibrary(r4pde)\nDSI2(ratings2$class, ratings2$n, 6)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 40.27778\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}